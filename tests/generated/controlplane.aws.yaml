---
# Source: controlplane/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: artifacts
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: artifacts
      app.kubernetes.io/instance: release-name
---
# Source: controlplane/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: authorizer
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: authorizer
      app.kubernetes.io/instance: release-name
---
# Source: controlplane/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: cluster
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: cluster
      app.kubernetes.io/instance: release-name
---
# Source: controlplane/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: dataproxy
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: dataproxy
      app.kubernetes.io/instance: release-name
---
# Source: controlplane/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: executions
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: executions
      app.kubernetes.io/instance: release-name
---
# Source: controlplane/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: identity
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: identity
      app.kubernetes.io/instance: release-name
---
# Source: controlplane/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: usage
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: usage
      app.kubernetes.io/instance: release-name
---
# Source: controlplane/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: artifacts
  labels:
    helm.sh/chart: controlplane-2025.5.6
    app.kubernetes.io/name: artifacts
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2025.5.6"
    app.kubernetes.io/managed-by: Helm
---
# Source: controlplane/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: authorizer
  labels:
    helm.sh/chart: controlplane-2025.5.6
    app.kubernetes.io/name: authorizer
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2025.5.6"
    app.kubernetes.io/managed-by: Helm
---
# Source: controlplane/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: cluster
  labels:
    helm.sh/chart: controlplane-2025.5.6
    app.kubernetes.io/name: cluster
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2025.5.6"
    app.kubernetes.io/managed-by: Helm
---
# Source: controlplane/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: dataproxy
  labels:
    helm.sh/chart: controlplane-2025.5.6
    app.kubernetes.io/name: dataproxy
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2025.5.6"
    app.kubernetes.io/managed-by: Helm
---
# Source: controlplane/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: executions
  labels:
    helm.sh/chart: controlplane-2025.5.6
    app.kubernetes.io/name: executions
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2025.5.6"
    app.kubernetes.io/managed-by: Helm
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::440744229819:role/staging-executions-role
---
# Source: controlplane/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: identity
  labels:
    helm.sh/chart: controlplane-2025.5.6
    app.kubernetes.io/name: identity
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2025.5.6"
    app.kubernetes.io/managed-by: Helm
---
# Source: controlplane/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: usage
  labels:
    helm.sh/chart: controlplane-2025.5.6
    app.kubernetes.io/name: usage
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2025.5.6"
    app.kubernetes.io/managed-by: Helm
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::440744229819:role/staging-usage-usageRole
---
# Source: controlplane/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: artifacts
  labels:
    helm.sh/chart: controlplane-2025.5.6
    app.kubernetes.io/name: artifacts
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2025.5.6"
    app.kubernetes.io/managed-by: Helm
type: Opaque
stringData:
---
# Source: controlplane/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: authorizer
  labels:
    helm.sh/chart: controlplane-2025.5.6
    app.kubernetes.io/name: authorizer
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2025.5.6"
    app.kubernetes.io/managed-by: Helm
type: Opaque
stringData:
---
# Source: controlplane/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: cluster
  labels:
    helm.sh/chart: controlplane-2025.5.6
    app.kubernetes.io/name: cluster
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2025.5.6"
    app.kubernetes.io/managed-by: Helm
type: Opaque
stringData:
---
# Source: controlplane/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: dataproxy
  labels:
    helm.sh/chart: controlplane-2025.5.6
    app.kubernetes.io/name: dataproxy
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2025.5.6"
    app.kubernetes.io/managed-by: Helm
type: Opaque
stringData:
---
# Source: controlplane/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: executions
  labels:
    helm.sh/chart: controlplane-2025.5.6
    app.kubernetes.io/name: executions
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2025.5.6"
    app.kubernetes.io/managed-by: Helm
type: Opaque
stringData:
---
# Source: controlplane/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: identity
  labels:
    helm.sh/chart: controlplane-2025.5.6
    app.kubernetes.io/name: identity
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2025.5.6"
    app.kubernetes.io/managed-by: Helm
type: Opaque
stringData:
---
# Source: controlplane/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: usage
  labels:
    helm.sh/chart: controlplane-2025.5.6
    app.kubernetes.io/name: usage
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2025.5.6"
    app.kubernetes.io/managed-by: Helm
type: Opaque
stringData:
---
# Source: controlplane/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: artifacts
  labels:
    helm.sh/chart: controlplane-2025.5.6
    app.kubernetes.io/name: artifacts
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2025.5.6"
    app.kubernetes.io/managed-by: Helm
data:
  config.yaml: |
    artifactsConfig:
      app:
        adminClient:
          hackFlagUntilCellIsolation: true
        artifactBlobStoreConfig:
          container: artifacts-offloaded-byocp-test-us-east-2
          stow:
            config:
              auth_type: iam
              region: us-east-2
            kind: s3
          type: stow
        artifactDatabaseConfig:
          connMaxLifeTime: 1m
          maxIdleConnections: 20
          maxOpenConnections: 30
          postgres:
            dbname: postgres
            host: database-1-instance-1.c982kkq6ghd1.us-east-2.rds.amazonaws.com
            options: sslmode=disable
            passwordPath: /etc/secrets/db-pass.txt
            port: 5432
            readReplicaHost: database-1-instance-1.c982kkq6ghd1.us-east-2.rds.amazonaws.com
            username: postgres
        artifactServerConfig:
          httpPort: 8089
          port: 8080
          respectUserOrgsForServerless: true
        artifactTriggerConfig:
          executionMaxRetryCount: 3
          executionSchedulerQuerySize: 20
          executionSchedulers: 1
          executionSchedulersWait: 10
          triggerProcessorQuerySize: 100
          triggerProcessors: 1
          triggerProcessorsWait: 10
    authorizer:
      internalCommunicationConfig:
        enabled: false
      type: Noop
    cache:
      identity:
        enabled: false
    cloudProvider:
      provider: mock
    connection:
      environment: staging
      region: us-east-2
      rootTenantURLPattern: dns:///{{ organization }}.cloud-staging.union.ai
    db:
      connectionPool:
        maxConnectionLifetime: 1m
        maxIdleConnections: 20
        maxOpenConnections: 20
      host: database-1-instance-1.c982kkq6ghd1.us-east-2.rds.amazonaws.com
      passwordPath: /etc/secrets/db-pass.txt
      username: postgres
    logger:
      level: 6
    otel:
      otlpgrpc:
        endpoint: http://otel-collector.monitoring.svc.cluster.local:4317
      sampler:
        parentSampler: traceid
        traceIdRatio: 0.001
      type: otlpgrpc
    sharedService:
      connectPort: 8081
      metrics:
        scope: 'artifacts:'
    union:
      auth:
        enable: false
      connection:
        trustedIdentityClaims:
          externalIdentityClaim: 0oa2n55xystvEjmOD5d7
      internalConnectionConfig:
        enabled: true
        urlPattern: '{{ service }}.union.svc.cluster.local:80'
---
# Source: controlplane/templates/configmap.yaml
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: authorizer
  labels:
    helm.sh/chart: controlplane-2025.5.6
    app.kubernetes.io/name: authorizer
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2025.5.6"
    app.kubernetes.io/managed-by: Helm
data:
  config.yaml: |
    authorizer:
      internalCommunicationConfig:
        enabled: false
      type: Noop
    cache:
      identity:
        enabled: false
    cloudProvider:
      provider: mock
    connection:
      environment: staging
      region: us-east-2
      rootTenantURLPattern: dns:///{{ organization }}.cloud-staging.union.ai
    logger:
      level: 6
    otel:
      otlpgrpc:
        endpoint: http://otel-collector.monitoring.svc.cluster.local:4317
      sampler:
        parentSampler: traceid
        traceIdRatio: 0.001
      type: otlpgrpc
    sharedService:
      connectPort: 8081
      metrics:
        scope: 'authorizer:'
    union:
      auth:
        enable: false
      connection:
        trustedIdentityClaims:
          externalIdentityClaim: 0oa2n55xystvEjmOD5d7
      internalConnectionConfig:
        enabled: true
        urlPattern: '{{ service }}.union.svc.cluster.local:80'
---
# Source: controlplane/templates/configmap.yaml
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: cluster
  labels:
    helm.sh/chart: controlplane-2025.5.6
    app.kubernetes.io/name: cluster
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2025.5.6"
    app.kubernetes.io/managed-by: Helm
data:
  config.yaml: |
    authorizer:
      internalCommunicationConfig:
        enabled: false
      type: Noop
    cache:
      identity:
        enabled: false
    cloudProvider:
      provider: mock
    cluster:
      aws:
        region: us-east-2
      cloudflare:
        domain: tunnel-staging.unionai.cloud
        serviceTokenId: 4ba70f3f-4347-4c4a-a986-b92964aecf46
    connection:
      environment: staging
      region: us-east-2
      rootTenantURLPattern: dns:///{{ organization }}.cloud-staging.union.ai
    db:
      connectionPool:
        maxConnectionLifetime: 1m
        maxIdleConnections: 20
        maxOpenConnections: 20
      host: database-1-instance-1.c982kkq6ghd1.us-east-2.rds.amazonaws.com
      passwordPath: /etc/secrets/db-pass.txt
      username: postgres
    logger:
      level: 6
    otel:
      otlpgrpc:
        endpoint: http://otel-collector.monitoring.svc.cluster.local:4317
      sampler:
        parentSampler: traceid
        traceIdRatio: 0.001
      type: otlpgrpc
    sharedService:
      connectPort: 8081
      metrics:
        scope: 'cluster:'
    timeseries:
      timestream:
        databaseName: byocp-test-timestream-db
        derivedTableName: cloudMetricsDerived
        region: us-east-2
        tableName: cloudMetricsRaw
        tags:
        - environment: staging
    union:
      auth:
        enable: false
      connection:
        trustedIdentityClaims:
          externalIdentityClaim: 0oa2n55xystvEjmOD5d7
      internalConnectionConfig:
        enabled: true
        urlPattern: '{{ service }}.union.svc.cluster.local:80'
---
# Source: controlplane/templates/configmap.yaml
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: dataproxy
  labels:
    helm.sh/chart: controlplane-2025.5.6
    app.kubernetes.io/name: dataproxy
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2025.5.6"
    app.kubernetes.io/managed-by: Helm
data:
  config.yaml: |
    authorizer:
      internalCommunicationConfig:
        enabled: false
      type: Noop
    cache:
      identity:
        enabled: false
    cloudProvider:
      provider: mock
    connection:
      environment: staging
      region: us-east-2
      rootTenantURLPattern: dns:///{{ organization }}.cloud-staging.union.ai
    logger:
      level: 6
    otel:
      otlpgrpc:
        endpoint: http://otel-collector.monitoring.svc.cluster.local:4317
      sampler:
        parentSampler: traceid
        traceIdRatio: 0.001
      type: otlpgrpc
    sharedService:
      connectPort: 8081
      metrics:
        scope: 'usage:'
    union:
      auth:
        enable: false
      connection:
        trustedIdentityClaims:
          externalIdentityClaim: 0oa2n55xystvEjmOD5d7
      internalConnectionConfig:
        enabled: true
        urlPattern: '{{ service }}.union.svc.cluster.local:80'
---
# Source: controlplane/templates/configmap.yaml
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: executions
  labels:
    helm.sh/chart: controlplane-2025.5.6
    app.kubernetes.io/name: executions
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2025.5.6"
    app.kubernetes.io/managed-by: Helm
data:
  config.yaml: |
    authorizer:
      internalCommunicationConfig:
        enabled: false
      type: Noop
    cache:
      identity:
        enabled: false
    cloudEventsProcessor:
      cloudProvider: AWS
      region: us-east-2
      subscriber:
        accountId: "440744229819"
        queueName: staging-us-east-2-executions-cloudEventsQueue
    cloudProvider:
      provider: mock
    connection:
      environment: staging
      region: us-east-2
      rootTenantURLPattern: dns:///{{ organization }}.cloud-staging.union.ai
    db:
      connectionPool:
        maxConnectionLifetime: 1m
        maxIdleConnections: 20
        maxOpenConnections: 20
      host: database-1-instance-1.c982kkq6ghd1.us-east-2.rds.amazonaws.com
      passwordPath: /etc/secrets/db-pass.txt
      username: postgres
    executions:
      app:
        adminClient:
          connection:
            authorizationHeader: flyte-authorization
            clientId: 0oa2n55xystvEjmOD5d7
            scopes:
            - all
        taskValidation:
          serverlessTaskPodSpecValidation:
            enabled: "true"
          skipOrgs: utt-mgdp-stg-us-east-2,utt-mgdp-stg-us-west-2,hosted
      apps:
        enrichIdentities: true
        publicURLPattern: https://%s.apps.%s.cloud-staging.union.ai
    logger:
      level: 6
    otel:
      otlpgrpc:
        endpoint: http://otel-collector.monitoring.svc.cluster.local:4317
      sampler:
        parentSampler: traceid
        traceIdRatio: 0.001
      type: otlpgrpc
    sharedService:
      connectPort: 8081
      metrics:
        scope: 'executions:'
    union:
      auth:
        enable: false
      connection:
        trustedIdentityClaims:
          externalIdentityClaim: 0oa2n55xystvEjmOD5d7
      internalConnectionConfig:
        enabled: true
        urlPattern: '{{ service }}.union.svc.cluster.local:80'
---
# Source: controlplane/templates/configmap.yaml
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: identity
  labels:
    helm.sh/chart: controlplane-2025.5.6
    app.kubernetes.io/name: identity
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2025.5.6"
    app.kubernetes.io/managed-by: Helm
data:
  config.yaml: |
    authorizer:
      internalCommunicationConfig:
        enabled: false
      type: Noop
    cache:
      identity:
        enabled: false
    cloudProvider:
      provider: mock
    connection:
      environment: staging
      region: us-east-2
      rootTenantURLPattern: dns:///{{ organization }}.cloud-staging.union.ai
    identity:
      app:
        adminClient:
          connection:
            authorizationHeader: flyte-authorization
            clientId: 0oa2n55xystvEjmOD5d7
            scopes:
            - all
        env: staging
        identityProviderConfig:
          okta:
            clientRegistrationEndpointUrl: https://unionai.oktapreview.com
        rootTenantURLPattern: dns:///{{ organization }}.cloud-staging.union.ai
    logger:
      level: 6
    otel:
      otlpgrpc:
        endpoint: http://otel-collector.monitoring.svc.cluster.local:4317
      sampler:
        parentSampler: traceid
        traceIdRatio: 0.001
      type: otlpgrpc
    sharedService:
      connectPort: 8081
      metrics:
        scope: 'identity:'
    union:
      auth:
        enable: false
      connection:
        trustedIdentityClaims:
          externalIdentityClaim: 0oa2n55xystvEjmOD5d7
      internalConnectionConfig:
        enabled: true
        urlPattern: '{{ service }}.union.svc.cluster.local:80'
---
# Source: controlplane/templates/configmap.yaml
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: usage
  labels:
    helm.sh/chart: controlplane-2025.5.6
    app.kubernetes.io/name: usage
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2025.5.6"
    app.kubernetes.io/managed-by: Helm
data:
  config.yaml: |
    authorizer:
      internalCommunicationConfig:
        enabled: false
      type: Noop
    cache:
      identity:
        enabled: false
    cloudProvider:
      provider: mock
    connection:
      environment: staging
      region: us-east-2
      rootTenantURLPattern: dns:///{{ organization }}.cloud-staging.union.ai
    logger:
      level: 6
    otel:
      otlpgrpc:
        endpoint: http://otel-collector.monitoring.svc.cluster.local:4317
      sampler:
        parentSampler: traceid
        traceIdRatio: 0.001
      type: otlpgrpc
    sharedService:
      connectPort: 8081
      metrics:
        scope: 'usage:'
    union:
      auth:
        enable: false
      connection:
        trustedIdentityClaims:
          externalIdentityClaim: 0oa2n55xystvEjmOD5d7
      internalConnectionConfig:
        enabled: true
        urlPattern: '{{ service }}.union.svc.cluster.local:80'
---
# Source: controlplane/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: artifacts
  labels:
    helm.sh/chart: controlplane-2025.5.6
    app.kubernetes.io/name: artifacts
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2025.5.6"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - name: grpc
      port: 80
      protocol: TCP
      targetPort: 8080
    - name: connect
      port:  83
      protocol: TCP
      targetPort: 8081
    - name: http
      port: 81
      protocol: TCP
      targetPort: 8089
    - name: debug
      port: 82
      protocol: TCP
      targetPort: 10254
  selector:
    app.kubernetes.io/name: artifacts
    app.kubernetes.io/instance: release-name
---
# Source: controlplane/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: authorizer
  labels:
    helm.sh/chart: controlplane-2025.5.6
    app.kubernetes.io/name: authorizer
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2025.5.6"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - name: grpc
      port: 80
      protocol: TCP
      targetPort: 8080
    - name: connect
      port:  83
      protocol: TCP
      targetPort: 8081
    - name: http
      port: 81
      protocol: TCP
      targetPort: 8089
    - name: debug
      port: 82
      protocol: TCP
      targetPort: 10254
  selector:
    app.kubernetes.io/name: authorizer
    app.kubernetes.io/instance: release-name
---
# Source: controlplane/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: cluster
  labels:
    helm.sh/chart: controlplane-2025.5.6
    app.kubernetes.io/name: cluster
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2025.5.6"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - name: grpc
      port: 80
      protocol: TCP
      targetPort: 8080
    - name: connect
      port:  83
      protocol: TCP
      targetPort: 8081
    - name: http
      port: 81
      protocol: TCP
      targetPort: 8089
    - name: debug
      port: 82
      protocol: TCP
      targetPort: 10254
  selector:
    app.kubernetes.io/name: cluster
    app.kubernetes.io/instance: release-name
---
# Source: controlplane/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: dataproxy
  labels:
    helm.sh/chart: controlplane-2025.5.6
    app.kubernetes.io/name: dataproxy
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2025.5.6"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - name: grpc
      port: 80
      protocol: TCP
      targetPort: 8080
    - name: connect
      port:  83
      protocol: TCP
      targetPort: 8081
    - name: http
      port: 81
      protocol: TCP
      targetPort: 8089
    - name: debug
      port: 82
      protocol: TCP
      targetPort: 10254
  selector:
    app.kubernetes.io/name: dataproxy
    app.kubernetes.io/instance: release-name
---
# Source: controlplane/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: executions
  labels:
    helm.sh/chart: controlplane-2025.5.6
    app.kubernetes.io/name: executions
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2025.5.6"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - name: grpc
      port: 80
      protocol: TCP
      targetPort: 8080
    - name: connect
      port:  83
      protocol: TCP
      targetPort: 8081
    - name: http
      port: 81
      protocol: TCP
      targetPort: 8089
    - name: debug
      port: 82
      protocol: TCP
      targetPort: 10254
  selector:
    app.kubernetes.io/name: executions
    app.kubernetes.io/instance: release-name
---
# Source: controlplane/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: identity
  labels:
    helm.sh/chart: controlplane-2025.5.6
    app.kubernetes.io/name: identity
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2025.5.6"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - name: grpc
      port: 80
      protocol: TCP
      targetPort: 8080
    - name: connect
      port:  83
      protocol: TCP
      targetPort: 8081
    - name: http
      port: 81
      protocol: TCP
      targetPort: 8089
    - name: debug
      port: 82
      protocol: TCP
      targetPort: 10254
  selector:
    app.kubernetes.io/name: identity
    app.kubernetes.io/instance: release-name
---
# Source: controlplane/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: usage
  labels:
    helm.sh/chart: controlplane-2025.5.6
    app.kubernetes.io/name: usage
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2025.5.6"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - name: grpc
      port: 80
      protocol: TCP
      targetPort: 8080
    - name: connect
      port:  83
      protocol: TCP
      targetPort: 8081
    - name: http
      port: 81
      protocol: TCP
      targetPort: 8089
    - name: debug
      port: 82
      protocol: TCP
      targetPort: 10254
  selector:
    app.kubernetes.io/name: usage
    app.kubernetes.io/instance: release-name
---
# Source: controlplane/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: artifacts
  labels:
    helm.sh/chart: controlplane-2025.5.6
    app.kubernetes.io/name: artifacts
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2025.5.6"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: artifacts
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: artifacts
        linkerd.io/inject: disabled
        prometheus.io/path: /metrics
        prometheus.io/port: "10254"
      labels:
        app.kubernetes.io/name: artifacts
        app.kubernetes.io/instance: release-name
    spec:
      serviceAccountName: artifacts
      strategy:
        rollingUpdate:
          maxSurge: 1
          maxUnavailable: 1
        type: RollingUpdate
      volumes:
      - name: secrets
        secret:
          secretName: artifacts
      - name: config
        configMap:
          name: artifacts
      initContainers:
        - name: artifacts-migrate
          image: 479331373192.dkr.ecr.us-east-2.amazonaws.com/cloud:0.0.2-updated-2
          imagePullPolicy: Always
          args:
          - artifacts
          - migrate
          - --config
          - /etc/config/*.yaml
          volumeMounts:
          - name: secrets
            mountPath: /etc/secrets/
          - name: config
            mountPath: /etc/config/
      containers:
        - name: artifacts
          image: 479331373192.dkr.ecr.us-east-2.amazonaws.com/cloud:0.0.2-updated-2
          imagePullPolicy: Always
          args:
            - artifacts
            - serve
            - --config
            - /etc/config/*.yaml
          ports:
            - name: grpc
              containerPort: 8080
              protocol: TCP
            - name: http
              containerPort: 8089
              protocol: TCP
            - name: debug
              containerPort: 10254
              protocol: TCP
          volumeMounts:
            - name: secrets
              mountPath: /etc/secrets/
            - name: config
              mountPath: /etc/config/
          env:
            - name: GOMEMLIMIT
              valueFrom:
                resourceFieldRef:
                  resource: limits.memory
            - name: GOMAXPROCS
              valueFrom:
                resourceFieldRef:
                  resource: limits.cpu
          resources:
              limits:
                cpu: 500m
                memory: 512Mi
              requests:
                cpu: 250m
                memory: 250Mi
          livenessProbe:
            httpGet:
              path: /healthcheck
              port: debug
            initialDelaySeconds: 3
            periodSeconds: 3
          readinessProbe:
            httpGet:
              path: /healthcheck
              port: debug
            initialDelaySeconds: 3
            periodSeconds: 3
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: artifacts
                    app.kubernetes.io/instance: release-name
                topologyKey: "kubernetes.io/hostname"
---
# Source: controlplane/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: authorizer
  labels:
    helm.sh/chart: controlplane-2025.5.6
    app.kubernetes.io/name: authorizer
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2025.5.6"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: authorizer
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: authorizer
        linkerd.io/inject: disabled
        prometheus.io/path: /metrics
        prometheus.io/port: "10254"
      labels:
        app.kubernetes.io/name: authorizer
        app.kubernetes.io/instance: release-name
    spec:
      serviceAccountName: authorizer
      strategy:
        rollingUpdate:
          maxSurge: 1
          maxUnavailable: 1
        type: RollingUpdate
      volumes:
      - name: secrets
        secret:
          secretName: authorizer
      - name: config
        configMap:
          name: authorizer
      containers:
        - name: authorizer
          image: 479331373192.dkr.ecr.us-east-2.amazonaws.com/cloud:0.0.2-updated-2
          imagePullPolicy: Always
          args:
            - authorizer
            - serve
            - --config
            - /etc/config/*.yaml
          ports:
            - name: grpc
              containerPort: 8080
              protocol: TCP
            - name: http
              containerPort: 8089
              protocol: TCP
            - name: debug
              containerPort: 10254
              protocol: TCP
          volumeMounts:
            - name: secrets
              mountPath: /etc/secrets/
            - name: config
              mountPath: /etc/config/
          env:
            - name: GOMEMLIMIT
              valueFrom:
                resourceFieldRef:
                  resource: limits.memory
            - name: GOMAXPROCS
              valueFrom:
                resourceFieldRef:
                  resource: limits.cpu
          resources:
              limits:
                cpu: 500m
                memory: 512Mi
              requests:
                cpu: 250m
                memory: 250Mi
          livenessProbe:
            httpGet:
              path: /healthcheck
              port: debug
            initialDelaySeconds: 3
            periodSeconds: 3
          readinessProbe:
            httpGet:
              path: /healthcheck
              port: debug
            initialDelaySeconds: 3
            periodSeconds: 3
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: authorizer
                    app.kubernetes.io/instance: release-name
                topologyKey: "kubernetes.io/hostname"
---
# Source: controlplane/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cluster
  labels:
    helm.sh/chart: controlplane-2025.5.6
    app.kubernetes.io/name: cluster
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2025.5.6"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: cluster
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: cluster
        linkerd.io/inject: disabled
        prometheus.io/path: /metrics
        prometheus.io/port: "10254"
      labels:
        app.kubernetes.io/name: cluster
        app.kubernetes.io/instance: release-name
    spec:
      serviceAccountName: cluster
      strategy:
        rollingUpdate:
          maxSurge: 1
          maxUnavailable: 1
        type: RollingUpdate
      volumes:
      - name: secrets
        secret:
          secretName: cluster
      - name: config
        configMap:
          name: cluster
      containers:
        - name: cluster
          image: 479331373192.dkr.ecr.us-east-2.amazonaws.com/cloud:0.0.2-updated-2
          imagePullPolicy: Always
          args:
            - cloudcluster
            - serve
            - --config
            - /etc/config/*.yaml
          ports:
            - name: grpc
              containerPort: 8080
              protocol: TCP
            - name: http
              containerPort: 8089
              protocol: TCP
            - name: debug
              containerPort: 10254
              protocol: TCP
          volumeMounts:
            - name: secrets
              mountPath: /etc/secrets/
            - name: config
              mountPath: /etc/config/
          env:
            - name: GOMEMLIMIT
              valueFrom:
                resourceFieldRef:
                  resource: limits.memory
            - name: GOMAXPROCS
              valueFrom:
                resourceFieldRef:
                  resource: limits.cpu
          resources:
              limits:
                cpu: 500m
                memory: 512Mi
              requests:
                cpu: 250m
                memory: 250Mi
          livenessProbe:
            httpGet:
              path: /healthcheck
              port: debug
            initialDelaySeconds: 3
            periodSeconds: 3
          readinessProbe:
            httpGet:
              path: /healthcheck
              port: debug
            initialDelaySeconds: 3
            periodSeconds: 3
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: cluster
                    app.kubernetes.io/instance: release-name
                topologyKey: "kubernetes.io/hostname"
---
# Source: controlplane/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dataproxy
  labels:
    helm.sh/chart: controlplane-2025.5.6
    app.kubernetes.io/name: dataproxy
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2025.5.6"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: dataproxy
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: dataproxy
        linkerd.io/inject: disabled
        prometheus.io/path: /metrics
        prometheus.io/port: "10254"
      labels:
        app.kubernetes.io/name: dataproxy
        app.kubernetes.io/instance: release-name
    spec:
      serviceAccountName: dataproxy
      strategy:
        rollingUpdate:
          maxSurge: 1
          maxUnavailable: 1
        type: RollingUpdate
      volumes:
      - name: secrets
        secret:
          secretName: dataproxy
      - name: config
        configMap:
          name: dataproxy
      containers:
        - name: dataproxy
          image: 479331373192.dkr.ecr.us-east-2.amazonaws.com/cloud:0.0.2-updated-2
          imagePullPolicy: Always
          args:
            - dataproxy
            - serve
            - --config
            - /etc/config/*.yaml
          ports:
            - name: grpc
              containerPort: 8080
              protocol: TCP
            - name: http
              containerPort: 8089
              protocol: TCP
            - name: debug
              containerPort: 10254
              protocol: TCP
          volumeMounts:
            - name: secrets
              mountPath: /etc/secrets/
            - name: config
              mountPath: /etc/config/
          env:
            - name: GOMEMLIMIT
              valueFrom:
                resourceFieldRef:
                  resource: limits.memory
            - name: GOMAXPROCS
              valueFrom:
                resourceFieldRef:
                  resource: limits.cpu
          resources:
              limits:
                cpu: 500m
                memory: 512Mi
              requests:
                cpu: 250m
                memory: 250Mi
          livenessProbe:
            httpGet:
              path: /healthcheck
              port: debug
            initialDelaySeconds: 3
            periodSeconds: 3
          readinessProbe:
            httpGet:
              path: /healthcheck
              port: debug
            initialDelaySeconds: 3
            periodSeconds: 3
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: dataproxy
                    app.kubernetes.io/instance: release-name
                topologyKey: "kubernetes.io/hostname"
---
# Source: controlplane/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: executions
  labels:
    helm.sh/chart: controlplane-2025.5.6
    app.kubernetes.io/name: executions
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2025.5.6"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: executions
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: executions
        linkerd.io/inject: disabled
        prometheus.io/path: /metrics
        prometheus.io/port: "10254"
      labels:
        app.kubernetes.io/name: executions
        app.kubernetes.io/instance: release-name
    spec:
      serviceAccountName: executions
      strategy:
        rollingUpdate:
          maxSurge: 1
          maxUnavailable: 1
        type: RollingUpdate
      volumes:
      - name: secrets
        secret:
          secretName: executions
      - name: config
        configMap:
          name: executions
      containers:
        - name: executions
          image: 479331373192.dkr.ecr.us-east-2.amazonaws.com/cloud:0.0.2-updated-2
          imagePullPolicy: Always
          args:
            - cloudpropeller
            - serve
            - --config
            - /etc/config/*.yaml
          ports:
            - name: grpc
              containerPort: 8080
              protocol: TCP
            - name: http
              containerPort: 8089
              protocol: TCP
            - name: debug
              containerPort: 10254
              protocol: TCP
          volumeMounts:
            - name: secrets
              mountPath: /etc/secrets/
            - name: config
              mountPath: /etc/config/
          env:
            - name: GOMEMLIMIT
              valueFrom:
                resourceFieldRef:
                  resource: limits.memory
            - name: GOMAXPROCS
              valueFrom:
                resourceFieldRef:
                  resource: limits.cpu
          resources:
              limits:
                cpu: 500m
                memory: 512Mi
              requests:
                cpu: 250m
                memory: 250Mi
          livenessProbe:
            httpGet:
              path: /healthcheck
              port: debug
            initialDelaySeconds: 3
            periodSeconds: 3
          readinessProbe:
            httpGet:
              path: /healthcheck
              port: debug
            initialDelaySeconds: 3
            periodSeconds: 3
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: executions
                    app.kubernetes.io/instance: release-name
                topologyKey: "kubernetes.io/hostname"
---
# Source: controlplane/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: identity
  labels:
    helm.sh/chart: controlplane-2025.5.6
    app.kubernetes.io/name: identity
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2025.5.6"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: identity
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: identity
        linkerd.io/inject: disabled
        prometheus.io/path: /metrics
        prometheus.io/port: "10254"
      labels:
        app.kubernetes.io/name: identity
        app.kubernetes.io/instance: release-name
    spec:
      serviceAccountName: identity
      strategy:
        rollingUpdate:
          maxSurge: 1
          maxUnavailable: 1
        type: RollingUpdate
      volumes:
      - name: secrets
        secret:
          secretName: identity
      - name: config
        configMap:
          name: identity
      containers:
        - name: identity
          image: 479331373192.dkr.ecr.us-east-2.amazonaws.com/cloud:0.0.2-updated-2
          imagePullPolicy: Always
          args:
            - cloudidentity
            - serve
            - --config
            - /etc/config/*.yaml
          ports:
            - name: grpc
              containerPort: 8080
              protocol: TCP
            - name: http
              containerPort: 8089
              protocol: TCP
            - name: debug
              containerPort: 10254
              protocol: TCP
          volumeMounts:
            - name: secrets
              mountPath: /etc/secrets/
            - name: config
              mountPath: /etc/config/
          env:
            - name: GOMEMLIMIT
              valueFrom:
                resourceFieldRef:
                  resource: limits.memory
            - name: GOMAXPROCS
              valueFrom:
                resourceFieldRef:
                  resource: limits.cpu
          resources:
              limits:
                cpu: 500m
                memory: 512Mi
              requests:
                cpu: 250m
                memory: 250Mi
          livenessProbe:
            httpGet:
              path: /healthcheck
              port: debug
            initialDelaySeconds: 3
            periodSeconds: 3
          readinessProbe:
            httpGet:
              path: /healthcheck
              port: debug
            initialDelaySeconds: 3
            periodSeconds: 3
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: identity
                    app.kubernetes.io/instance: release-name
                topologyKey: "kubernetes.io/hostname"
---
# Source: controlplane/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: usage
  labels:
    helm.sh/chart: controlplane-2025.5.6
    app.kubernetes.io/name: usage
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2025.5.6"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: usage
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: usage
        linkerd.io/inject: disabled
        prometheus.io/path: /metrics
        prometheus.io/port: "10254"
      labels:
        app.kubernetes.io/name: usage
        app.kubernetes.io/instance: release-name
    spec:
      serviceAccountName: usage
      strategy:
        rollingUpdate:
          maxSurge: 1
          maxUnavailable: 1
        type: RollingUpdate
      volumes:
      - name: secrets
        secret:
          secretName: usage
      - name: config
        configMap:
          name: usage
      containers:
        - name: usage
          image: 479331373192.dkr.ecr.us-east-2.amazonaws.com/cloud:0.0.2-updated-2
          imagePullPolicy: Always
          args:
            - usage
            - serve
            - --config
            - /etc/config/*.yaml
          ports:
            - name: grpc
              containerPort: 8080
              protocol: TCP
            - name: http
              containerPort: 8089
              protocol: TCP
            - name: debug
              containerPort: 10254
              protocol: TCP
          volumeMounts:
            - name: secrets
              mountPath: /etc/secrets/
            - name: config
              mountPath: /etc/config/
          env:
            - name: GOMEMLIMIT
              valueFrom:
                resourceFieldRef:
                  resource: limits.memory
            - name: GOMAXPROCS
              valueFrom:
                resourceFieldRef:
                  resource: limits.cpu
          resources:
              limits:
                cpu: 500m
                memory: 512Mi
              requests:
                cpu: 250m
                memory: 250Mi
          livenessProbe:
            httpGet:
              path: /healthcheck
              port: debug
            initialDelaySeconds: 3
            periodSeconds: 3
          readinessProbe:
            httpGet:
              path: /healthcheck
              port: debug
            initialDelaySeconds: 3
            periodSeconds: 3
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: usage
                    app.kubernetes.io/instance: release-name
                topologyKey: "kubernetes.io/hostname"
---
# Source: controlplane/templates/hpa.yaml
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: artifacts
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: artifacts
  minReplicas: 1
  maxReplicas: 1
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 80
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80
---
# Source: controlplane/templates/hpa.yaml
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: authorizer
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: authorizer
  minReplicas: 1
  maxReplicas: 1
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 80
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80
---
# Source: controlplane/templates/hpa.yaml
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: cluster
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: cluster
  minReplicas: 1
  maxReplicas: 1
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 80
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80
---
# Source: controlplane/templates/hpa.yaml
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: dataproxy
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: dataproxy
  minReplicas: 1
  maxReplicas: 1
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 80
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80
---
# Source: controlplane/templates/hpa.yaml
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: executions
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: executions
  minReplicas: 1
  maxReplicas: 1
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 80
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80
---
# Source: controlplane/templates/hpa.yaml
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: identity
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: identity
  minReplicas: 1
  maxReplicas: 1
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 80
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80
---
# Source: controlplane/templates/hpa.yaml
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: usage
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: usage
  minReplicas: 1
  maxReplicas: 1
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 80
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80
