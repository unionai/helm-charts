# ----------------------------------------------------------------------------
# Global Configuration
# ----------------------------------------------------------------------------
# Global values are accessible to both the chart and all subcharts.
# Override these in deployment-specific values files:
#   - values.aws.yaml: AWS-specific configuration (S3, IAM roles)
#   - values.aws.selfhosted-intracluster.yaml: Self-contained intra-cluster configuration
#
# Usage:
#   helm install -f values.aws.yaml [...]
#   helm install -f values.aws.selfhosted-intracluster.yaml [...]

global:
  # 1. UNION_CONTROL_PLANE_HOST - Union control plane hostname
  #    Format: "hostname" (no protocol prefix for standard BYOC)
  #    Example: "mycompany.unionai.cloud" or "union.example.com"
  #    Source: Provided by Union team for BYOC deployments
  UNION_CONTROL_PLANE_HOST: ""

  # 2. CLUSTER_NAME - Unique cluster identifier
  #    Format: Lowercase alphanumeric with hyphens
  #    Example: "prod-us-east-1" or "staging-cluster"
  #    Note: Must be unique within your organization
  CLUSTER_NAME: ""

  # 3. ORG_NAME - Organization name
  #    Format: RFC 1123 compliant (lowercase alphanumeric and hyphens)
  #    Example: "acme-corp" or "my-organization"
  #    Source: Provided by Union team
  ORG_NAME: ""

  # 4. CLIENT_ID - Client ID for dataplane authentication
  #    Format: String provided by Union team
  #    Example: "dataplane-prod-client"
  #    Source: Provided by Union team
  CLIENT_ID: ""

  # 5. METADATA_BUCKET - S3 bucket for workflow metadata
  #    Format: Valid S3 bucket name
  #    Example: "my-union-metadata-bucket"
  #    Note: Bucket must exist before deployment
  METADATA_BUCKET: ""

  # 6. S3_FAST_REGISTRATION_BUCKET - S3 bucket for code uploads
  #    Format: Valid S3 bucket name
  #    Example: "my-union-fast-registration-bucket"
  #    Note: Can be same as metadata bucket or separate
  FAST_REGISTRATION_BUCKET: ""

# ----------------------------------------------------------------------------
# Additional Configuration
# ----------------------------------------------------------------------------
# Note: Most configuration now comes from globals above.
# Database host, name, user, buckets, and region are all configured via globals.

# -- Override the chart name.
nameOverride: ""
# -- Override the chart fullname.
fullnameOverride: ""
# -- Set the control plane host for your Union dataplane installation.  This will be provided by Union.
host: "{{ .Values.global.UNION_CONTROL_PLANE_HOST }}"

# -- Cluster name should be shared with Union for proper functionality.
clusterName: "{{ .Values.global.CLUSTER_NAME }}"
# -- Organization name should be provided by Union.
orgName: "{{ .Values.global.ORG_NAME }}"

# -- Define additional pod environment variables for all of the Union pods.
additionalPodEnvVars: { }
#  key1: "value1"
#  key2: "value2"
# -- Define additional pod annotations for all of the Union pods.
additionalPodAnnotations: { }
#  annotation1: "value1"
#  annotation2: "value2"
# -- Define additional pod labels for all of the Union pods.
additionalPodLabels: { }
#  label1: "value1"
#  label2: "value2"
# -- Define additional PodSpec values for all of the Union pods.
additionalPodSpec: { }

# -- Global kubernetes scheduling constraints that will be applied to the
# pods.  Application specific constraints will always take precedence.
scheduling:
  # -- See https://kubernetes.io/docs/concepts/scheduling-eviction/topology-spread-constraints
  topologySpreadConstraints: { }
  #  - maxSkew: 1
  #    topologyKey: zone
  #    whenUnsatisfiable: DoNotSchedule
  #    labelSelector:
  #      matchLabels:
  #        foo: bar
  # -- See https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node
  affinity: { }
  #  nodeAffinity:
  #    requiredDuringSchedulingIgnoredDuringExecution:
  #      nodeSelectorTerms:
  #        - matchExpressions:
  #            - key: zone
  #              operator: NotIn
  #              values:
  #                - zoneC
  # -- See https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node
  nodeSelector: { }
  #  key: "value"
    # -- See https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration
  tolerations: [ ]
  #  - key: "key1"
  #    operator: "Equal"
  #    value: "value1"
  #    effect: "NoSchedule"
  nodeName: ""

# -- This is the annotation key that is added to service accounts.  Used with GCP and AWS.
userRoleAnnotationKey: "eks.amazonaws.com/role-arn"
# -- This is the value of the annotation key that is added to service accounts. Used with GCP and AWS.
userRoleAnnotationValue: "arn:aws:iam::ACCOUNT_ID:role/flyte_project_role"

# -- clusterresourcesync contains the configuration information for the syncresources service.
clusterresourcesync:
  # -- Enable or disable the syncresources service
  enabled: true
  # -- Override service account values for the syncresources service
  serviceAccount:
    # -- Override the service account name for the syncresources service
    name: ""
  # -- Additional pod annotations for the syncresources service
  podAnnotations: { }
  # -- Additional pod environment variables for the syncresources service
  podEnv: { }
  # -- nodeSelector constraints for the syncresources pods
  nodeSelector: { }
  # -- topologySpreadConstraints for the syncresources pods
  topologySpreadConstraints: { }
  # -- tolerations for the syncresources pods
  tolerations: [ ]
  # -- affinity configurations for the syncresources pods
  affinity: { }
  # -- nodeName constraints for the syncresources pods
  nodeName: ""
  # -- Syncresources service configuration
  config:
    cluster_resources:
      # -- How frequently to sync the cluster resources
      refreshInterval: 5m
      # -- Start the cluster resource manager in standalone mode.
      standaloneDeployment: true
      # -- The path to the project the templates used to configure project resource quotas.
      templatePath: /etc/flyte/clusterresource/templates
      customData:
        - production:
            - projectQuotaCpu:
                value: "4096"
            - projectQuotaMemory:
                value: "2Ti"
            - projectQuotaNvidiaGpu:
                value: "256"
            - defaultUserRoleKey:
                value: '{{ tpl .Values.userRoleAnnotationKey . }}'
            - defaultUserRoleValue:
                value: '{{ tpl .Values.userRoleAnnotationValue . }}'
        - staging:
            - projectQuotaCpu:
                value: "4096"
            - projectQuotaMemory:
                value: "2Ti"
            - projectQuotaNvidiaGpu:
                value: "256"
            - defaultUserRoleKey:
                value: '{{ tpl .Values.userRoleAnnotationKey . }}'
            - defaultUserRoleValue:
                value: '{{ tpl .Values.userRoleAnnotationValue . }}'
        - development:
            - projectQuotaCpu:
                value: "4096"
            - projectQuotaMemory:
                value: "2Ti"
            - projectQuotaNvidiaGpu:
                value: "256"
            - defaultUserRoleKey:
                value: '{{ tpl .Values.userRoleAnnotationKey . }}'
            - defaultUserRoleValue:
                value: '{{ tpl .Values.userRoleAnnotationValue . }}'
      # -- The name of the cluster.  This should always be the same as the cluster name in the config.
      clusterName: '{{ include "getClusterName" . }}'
    # -- Additional configuration for the cluster resources service
    clusterResourcesPrivate:
      # -- Configuration of app serving services.
      app:
        isServerless: false
    # -- Connection information for the sync resources service to connect to the Union control plane.
    union:
      connection:
        # This is the defacto configuration for Union managed control planes.
        # -- Host to connect to
        host: 'dns:///{{ tpl .Values.host . }}'

        # -- Whether to connect over insecure channel
        # insecure: false

        # -- InsecureSkipVerify controls whether a client verifies the server's certificate chain and host name.
        # Caution: shouldn't be used for production use cases
        # insecureSkipVerify: false

        # -- Minimum timeout for establishing a connection
        # minConnectTimeout: "10s"

        # -- Max delay for grpc backoff
        # maxBackoffDelay: "8m"

        # -- gRPC per retry timeout
        # perRetryTimeout: "30s"

        # -- Max number of gRPC retries
        # maxRetries: 3

        # -- Configuration for keeping the connection alive.
        # keepAliveConfig:
          # -- After a duration of this time if the client doesn't see any activity it pings the server to see if the transport is still alive.
          # time: "30s"
          # -- After having pinged for keepalive check, the client waits for a duration of Timeout and if no activity is seen even after that the connection is closed.
          # timeout: "5s"
          # -- If true, client sends keepalive pings even with no active RPCs.
          # permitWithoutStream: true

        # -- Allowing trusted client claims makes use of the default client request interceptor
        # which allows sending default claims for internal identity, external identity and its type
        # trustedIdentityClaims:
          # -- Enables passing of trusted claims while making inter service calls
          # enabled: false
          # -- External identity claim of the service which is authorized to make internal service call. These are verified against userclouds actions
          # externalIdentityClaim: ""
          # -- External identity type claim of app or user to use for the current service identity. It should be an 'app' for inter service communication
          # externalIdentityTypeClaim: ""

        # -- Maximum size of a message in bytes of a gRPC message
        # maxRecvMsgSize: 67108864  # 64MB
      auth:
        type: ClientSecret
        clientId: '{{ tpl .Values.secrets.admin.clientId . }}'
        clientSecretLocation: /etc/union/secret/client_secret
        authorizationMetadataKey: "flyte-authorization"
        tokenRefreshWindow: 5m
  # -- The templates that are used to create and/or update kubernetes resources for Union projects.
  templates:
    # -- Template for namespaces resources
    - key: a_namespace
      value: |
        apiVersion: v1
        kind: Namespace
        metadata:
          name: {{ namespace }}
          labels:
            union.ai/namespace-type: flyte
        spec:
          finalizers:
          - kubernetes

    # -- Patch default service account
    - key: b_default_service_account
      value: |
        apiVersion: v1
        kind: ServiceAccount
        metadata:
          name: default
          namespace: {{ namespace }}
          annotations:
            {{ defaultUserRoleKey }}: {{ defaultUserRoleValue }}

    - key: c_project_resource_quota
      value: |
        apiVersion: v1
        kind: ResourceQuota
        metadata:
          name: project-quota
          namespace: {{ namespace }}
        spec:
          hard:
            limits.cpu: {{ projectQuotaCpu }}
            limits.memory: {{ projectQuotaMemory }}
            requests.nvidia.com/gpu: {{ projectQuotaNvidiaGpu }}
  # -- Kubernetes resource configuration for the syncresources service
  resources:
    limits:
      cpu: "1"
      memory: "500Mi"
    requests:
      cpu: "500m"
      memory: "100Mi"

# -- Global configuration settings for all Union services.
config:
  # -- Admin Client configuration [structure](https://pkg.go.dev/github.com/flyteorg/flytepropeller/pkg/controller/nodes/subworkflow/launchplan#AdminConfig)
  admin:
    event:
      type: admin
      rate: 500
      capacity: 1000
    admin:
      endpoint: 'dns:///{{ tpl .Values.host . }}'
      clientId: '{{ tpl .Values.secrets.admin.clientId . }}'
      clientSecretLocation: /etc/union/secret/client_secret
      insecure: false
  authorizer:
    type: noop
  # -- Catalog Client configuration [structure](https://pkg.go.dev/github.com/flyteorg/flytepropeller/pkg/controller/nodes/task/catalog#Config)
  # Additional advanced Catalog configuration [here](https://pkg.go.dev/github.com/lyft/flyteplugins/go/tasks/pluginmachinery/catalog#Config)
  catalog:
    catalog-cache:
      cache-endpoint: 'dns:///{{ tpl .Values.host . }}'
      endpoint: 'dns:///{{ tpl .Values.host . }}'
      insecure: false
      type: fallback
      use-admin-auth: true
  clusters:
    labelClusterMap: { }
    clusterConfigs: [ ]
  # -- Override any configuration settings.
  configOverrides:
    cache:
      # Overrides identity caching which is not available in the dataplane.
      identity:
        enabled: false
  # -- Copilot configuration
  copilot:
    plugins:
      k8s:
        # -- Structure documented [here](https://pkg.go.dev/github.com/lyft/flyteplugins@v0.5.28/go/tasks/pluginmachinery/flytek8s/config#FlyteCoPilotConfig)
        co-pilot:
          name: flyte-copilot-
          image: "{{ .Values.image.flytecopilot.repository }}:{{ .Values.image.flytecopilot.tag }}"
          start-timeout: 30s
  # -- Core propeller configuration
  core:
    # -- follows the structure specified [here](https://pkg.go.dev/github.com/flyteorg/flytepropeller/pkg/controller/config).
    propeller:
      rawoutput-prefix: "s3://{{ tpl .Values.storage.bucketName . }}"
      metadata-prefix: metadata/propeller
      workers: 4
      max-workflow-retries: 30
      workflow-reeval-duration: 30s
      downstream-eval-duration: 30s
      limit-namespace: "all"
      prof-port: 10254
      metrics-prefix: flyte
      enable-admin-launcher: true
      leader-election:
        lock-config-map:
          name: propeller-leader
          namespace: union
        enabled: true
        lease-duration: 15s
        renew-deadline: 10s
        retry-period: 2s
      queue:
        type: batch
        batching-interval: 2s
        batch-size: -1
        queue:
          type: maxof
          rate: 100
          capacity: 1000
          base-delay: 5s
          max-delay: 120s
        sub-queue:
          type: bucket
          rate: 10
          capacity: 100
      literal-offloading-config:
        enabled: true
    webhook:
      certDir: /etc/webhook/certs
      serviceName: flyte-pod-webhook
      secretManagerTypes:
      - Embedded
      - K8s
      embeddedSecretManagerConfig:
        type: "{{ .Values.proxy.secretManager.type }}"
        k8sConfig:
          namespace: '{{ include "proxy.secretsNamespace" . }}'
        imagePullSecrets:
          enabled: true
  # -- Domains configuration for Union projects. This enables the specified number of domains across all projects in Union.
  domain:
    domains:
      - id: development
        name: development
      - id: staging
        name: staging
      - id: production
        name: production
  enabled_plugins:
    # -- Tasks specific configuration [structure](https://pkg.go.dev/github.com/flyteorg/flytepropeller/pkg/controller/nodes/task/config#GetConfig)
    tasks:
      # -- Plugins configuration, [structure](https://pkg.go.dev/github.com/flyteorg/flytepropeller/pkg/controller/nodes/task/config#TaskPluginConfig)
      task-plugins:
        # -- [Enabled Plugins](https://pkg.go.dev/github.com/lyft/flyteplugins/go/tasks/config#Config). Enable sagemaker*, athena if you install the backend
        # plugins
        enabled-plugins:
          - container
          - sidecar
          - k8s-array
          - agent-service
          - echo
        default-for-task-types:
          container: container
          sidecar: sidecar
          container_array: k8s-array
          # -- Uncomment to enable task type that uses Flyte Agent
          # bigquery_query_job_task: agent-service
  # -- Kubernetes specific Flyte configuration
  k8s:
    plugins:
      # -- Configuration section for all K8s specific plugins [Configuration structure](https://pkg.go.dev/github.com/lyft/flyteplugins/go/tasks/pluginmachinery/flytek8s/config)
      k8s:
        default-env-vars: [ ]
        default-cpus: 100m
        default-memory: 100Mi
  # -- Logging configuration
  logger:
    show-source: true
    level: 4
  # -- Configuration for the Union operator service
  operator:
    # -- Enables the operator service
    enabled: true
    # -- Enable app serving
    apps:
      enabled: "{{ .Values.serving.enabled }}"
    # -- Sync the configuration from the control plane. This will overwrite any configuration values set as part of the deploy.
    syncClusterConfig:
      enabled: false
    # -- Enable the cloudflare tunnel service for secure communication with the control plane.
    enableTunnelService: true
    # -- Set the cluster information for the operator service
    clusterId:
      # -- The organization name for the cluster.  This should match your organization name that you were provided.
      organization: "{{ tpl .Values.orgName . }}"
    # -- Dataplane cluster configuration.
    clusterData:
      # -- The client id used to authenticate to the control plane.  This will be provided by Union.
      appId: "{{ tpl .Values.secrets.admin.clientId . }}"
      # -- The hose name for control plane access. This will be provided by Union.
      cloudHostName: "{{ tpl .Values.host . }}"
      # -- The prefix for constructing object storage URLs.
      metadataBucketPrefix: "s3://{{ tpl .Values.storage.bucketName . }}"
      # -- The bucket name for object storage.
      bucketName: "{{ tpl .Values.storage.bucketName . }}"
      # -- The bucket region for object storage.
      bucketRegion: "{{ tpl .Values.storage.region . }}"
      userRoleKey: "{{ tpl (.Values.userRoleAnnotationKey | toString) $ }}"
      userRole: "{{ tpl (.Values.userRoleAnnotationValue | toString) $ }}"
      # -- For GCP only, the project id for object storage.
      gcpProjectId: "{{ tpl .Values.storage.gcp.projectId . }}"
    # -- Configuration for the usage reporting service.
    collectUsages:
      # -- Enable usage collection in the operator service.
      enabled: true
    # -- Configuration for billable usage collector.
    billableUsageCollector:
      # -- Enable billable usage collection in the operator service.
      enabled: true
    # -- Heartbeat check configuration.
    dependenciesHeartbeat:
      # -- Define the propeller health check endpoint.
      propeller:
        endpoint: '{{ include "propeller.health.url" . }}'
      # -- Define the operator proxy health check endpoint.
      proxy:
        endpoint: '{{ include "proxy.health.url" . }}'
      # -- Define the prometheus health check endpoint.
      prometheus:
        endpoint: '{{ include "prometheus.health.url" . }}'
  # -- Configuration for the operator proxy service.
  proxy:
    # -- Secret manager configuration
    smConfig:
      # -- Enable or disable secret manager support for the Union dataplane.
      enabled: "{{ .Values.proxy.secretManager.enabled }}"
      # -- The type of secret manager to use.
      type: "{{ .Values.proxy.secretManager.type }}"
      # -- Kubernetes specific secret manager configuration.
      k8sConfig:
        namespace: '{{ include "proxy.secretsNamespace" . }}'
    persistedLogs:
      sourceType: ObjectStore
      objectStore:
        prefix: persisted-logs
        pathTemplate: "namespace-{{`{{.KubernetesNamespace}}`}}.pod-{{`{{.KubernetesPodName}}`}}.cont-{{`{{.KubernetesContainerName}}`}}"
    imageBuilderConfig:
      authenticationType: "{{ .Values.imageBuilder.authenticationType }}"
      defaultRepository: "{{ .Values.imageBuilder.defaultRepository }}"
  # -- Resource manager configuration
  resource_manager:
    # -- resource manager configuration
    propeller:
      resourcemanager:
        type: noop
  # Refer to the full [structure](https://pkg.go.dev/github.com/lyft/flyteadmin@v0.3.37/pkg/runtime/interfaces#ApplicationConfig) for documentation.
  schedulerConfig:
    scheduler:
      metricsScope: "flyte:"
      profilerPort: 10254
  # -- Section that configures shared union services
  sharedService:
    port: 8081
    features:
      gatewayV2: true
  # -- Section that configures how the Task logs are displayed on the UI. This has to be changed based on your actual logging provider.
  # Refer to [structure](https://pkg.go.dev/github.com/lyft/flyteplugins/go/tasks/logs#LogConfig) to understand how to configure various
  # logging engines
  task_logs:
    plugins:
      logs:
        kubernetes-enabled: false
        # -- One option is to enable cloudwatch logging for EKS, update the region and log group accordingly
        cloudwatch-enabled: false
        templates:
          - displayName: Task Logs
            scheme: TaskExecution
            templateUris:
              - "/console/projects/{{`{{.executionProject}}`}}/domains/{{`{{.executionDomain}}`}}/executions/{{`{{.executionName}}`}}/nodeId/{{`{{.nodeID}}`}}/taskId/{{`{{.taskID}}`}}/attempt/{{`{{.taskRetryAttempt}}`}}/view/logs?duration=all&fromExecutionNav=true"
        dynamic-log-links:
          - vscode:
              displayName: VS Code Debugger
              templateUris:
                - "/dataplane/pod/v1/generated_name/task/{{`{{.executionProject}}`}}/{{`{{.executionDomain}}`}}/{{`{{.executionName}}`}}/{{`{{.nodeID}}`}}/{{`{{.taskRetryAttempt}}`}}/{{`{{.taskProject}}`}}/{{`{{.taskDomain}}`}}/{{`{{.taskID}}`}}/{{`{{.taskVersion}}`}}/"
  # -- Task default resources configuration
  # Refer to the full [structure](https://pkg.go.dev/github.com/lyft/flyteadmin@v0.3.37/pkg/runtime/interfaces#TaskResourceConfiguration).
  task_resource_defaults:
    # -- Task default resources parameters
    task_resources:
      defaults:
        cpu: 100m
        memory: 500Mi
      limits:
        cpu: 2
        memory: 1Gi
        # Maybe `0`?
        gpu: 1
  union:
    # -- Connection information to the union control plane.
    connection:
      # This is the defacto configuration for Union managed control planes.
      # -- Host to connect to
      host: 'dns:///{{ tpl .Values.host . }}'

      # -- Whether to connect over insecure channel
      # insecure: false

      # -- InsecureSkipVerify controls whether a client verifies the server's certificate chain and host name.
      # Caution: shouldn't be used for production use cases
      # insecureSkipVerify: false

      # -- Minimum timeout for establishing a connection
      # minConnectTimeout: "10s"

      # -- Max delay for grpc backoff
      # maxBackoffDelay: "8m"

      # -- gRPC per retry timeout
      # perRetryTimeout: "30s"

      # -- Max number of gRPC retries
      # maxRetries: 3

      # -- Configuration for keeping the connection alive.
      # keepAliveConfig:
        # -- After a duration of this time if the client doesn't see any activity it pings the server to see if the transport is still alive.
        # time: "30s"
        # -- After having pinged for keepalive check, the client waits for a duration of Timeout and if no activity is seen even after that the connection is closed.
        # timeout: "5s"
        # -- If true, client sends keepalive pings even with no active RPCs.
        # permitWithoutStream: true

      # -- Allowing trusted client claims makes use of the default client request interceptor
      # which allows sending default claims for internal identity, external identity and its type
      # trustedIdentityClaims:
        # -- Enables passing of trusted claims while making inter service calls
        # enabled: false
        # -- External identity claim of the service which is authorized to make internal service call. These are verified against userclouds actions
        # externalIdentityClaim: ""
        # -- External identity type claim of app or user to use for the current service identity. It should be an 'app' for inter service communication
        # externalIdentityTypeClaim: ""

      # -- Maximum size of a message in bytes of a gRPC message
      # maxRecvMsgSize: 67108864  # 64MB
    auth:
      type: ClientSecret
      clientId: "{{ tpl .Values.secrets.admin.clientId . }}"
      clientSecretLocation: /etc/union/secret/client_secret
      authorizationMetadataKey: "flyte-authorization"
      tokenRefreshWindow: 5m

cost:
  # -- Enable or disable the cost service resources.  This does not include the opencost or other compatible monitoring services.
  enabled: true
  serviceMonitor:
    # -- The name of the ServiceMonitor.
    name: cost
    # -- Match labels for the ServiceMonitor.
    matchLabels:
      app.kubernetes.io/name: opencost

# -- Databricks integration configuration
databricks:
  enabled: false
  plugin_config: { }

# -- Dcgm exporter configuration
dcgm-exporter:
  # -- Enable or disable the dcgm exporter
  enabled: false

opencost:
  # -- Enable or disable the opencost installation.
  enabled: true
  fullnameOverride: opencost
  opencost:
    # By default, disable prometheus. This runs opencost in exporter mode: https://www.opencost.io/docs/opencost-exporter
    # Set internal or external values to populate the PROMETHEUS_SERVER_ENDPOINT env var
    prometheus:
      external:
        enabled: true
        url: "http://union-operator-prometheus.{{.Release.Namespace}}.svc:80/prometheus"
      internal:
        enabled: false

    ui:
      enabled: false
    exporter:
      resources:
        requests:
          cpu: 500m
          memory: 1Gi
        limits:
          cpu: 1000m
          memory: 4Gi

# -- Configuration for fluentbit used for the persistent logging feature.
fluentbit:
  enabled: true
  existingConfigMap: fluentbit-system
  # Allow fluentbit to run on all nodes to be able to push all logs.
  tolerations:
    - operator: Exists
  serviceAccount:
    name: fluentbit-system
  # If you are using EKS and would like to use the IAM role for service account (IRSA) feature,
  # uncomment the following line and set the role ARN
    annotations: {}  # eks.amazonaws.com/role-arn: <role>
  # If you would like to use access keys, uncomment the following lines and set the access key and secret key
  env: [ ]
  #  - name: AWS_ACCESS_KEY_ID
  #    value:
  #  - name: AWS_SECRET_ACCESS_KEY
  #    value:


# -- Flyteagent configuration
flyteagent:
  enabled: false
  plugin_config: { }

executor:
  enabled: true
  config:
    organization: "{{ tpl .Values.orgName . }}"
    cluster: "{{ tpl .Values.clusterName . }}"
    workerName: worker1
    unionAuth:
      injectSecret: true
      secretName: EAGER_API_KEY
    maxActions: 2000
    evaluatorCount: 64
  resources:
    limits:
      cpu: 4
      memory: 8Gi
    requests:
      cpu: 2
      memory: 4Gi
  podLabels:
    app: executor
  selector:
    matchLabels:
      app: executor
  task_logs:
    plugins:
      logs:
        kubernetes-enabled: true
        # -- One option is to enable cloudwatch logging for EKS, update the region and log group accordingly
        cloudwatch-enabled: false
  sharedService:
    metrics:
      scope: "executor:"
    security:
      secure: false
      useAuth: false
      allowCors: true
      allowedOrigins:
        # Accepting all domains for Sandbox installation
        - "*"
      allowedHeaders:
        - "Content-Type"
      allowLocalhostAccess: true
  propeller:
    node-config:
      disable-input-file-writes: true
  plugins:
    ioutils:
      remoteFileOutputPaths:
        deckFilename: report.html
    # -- Configuration section for all K8s specific plugins [Configuration structure](https://pkg.go.dev/github.com/lyft/flyteplugins/go/tasks/pluginmachinery/flytek8s/config)
    fasttask:
      additional-worker-args:
        - "--last-ack-grace-period-seconds"
        - "120"
      callback-uri: "http://unionai-dataplane-executor.{{.Release.Namespace}}.svc.cluster.local:15605"
      grace-period-status-not-found: 2m
    k8s:
      disable-inject-owner-references: true

# -- Flytepropeller configuration
flytepropeller:
  enabled: true
  priorityClassName: "system-cluster-critical"
  # -- Replicas count for Flytepropeller deployment
  replicaCount: 1
  # -- Default resources requests and limits for Flytepropeller deployment
  resources:
    limits:
      cpu: "2"
      memory: "4Gi"
    requests:
      cpu: "2"
      memory: "4Gi"

  cacheSizeMbs: 0

  # -- Default regex string for searching configuration files
  configPath: /etc/flyte/config/*.yaml

  # -- Configuration for service accounts for FlytePropeller
  serviceAccount:
    # -- Should a service account be created for FlytePropeller
    create: true
    # -- Annotations for ServiceAccount attached to FlytePropeller pods
    annotations: { }
    # -- ImapgePullSecrets to automatically assign to the service account
    imagePullSecrets: [ ]
  # -- Labels for the Flytepropeller pods
  podLabels: { }
  # -- Annotations for Flytepropeller pods
  podAnnotations: { }
  # -- nodeSelector for Flytepropeller deployment
  nodeSelector: { }
  # -- tolerations for Flytepropeller deployment
  tolerations: [ ]
  # -- affinity for Flytepropeller deployment
  affinity: { }
  # -- topologySpreadConstraints for Flytepropeller deployment
  topologySpreadConstraints: { }
  # -- nodeName constraints for Flytepropeller deployment
  nodeName: ""
  # -- extra arguments to pass to propeller.
  extraArgs: { }

  additionalContainers: { }
  terminationMessagePolicy: ""

  service:
    enabled: true
    additionalPorts:
      - name: fasttask
        port: 15605
        targetPort: 15605
        protocol: TCP

  podEnv: { }

  secretName: union-secret-auth

# -- Configuration for the Flytepropeller webhook
flytepropellerwebhook:
  # -- enable or disable secrets webhook
  enabled: true
  # -- Replicas
  replicaCount: 1
  # -- Sets priorityClassName for webhook pod
  priorityClassName: ""
  # -- Configuration for service accounts for the webhook
  serviceAccount:
    # -- Should a service account be created for the webhook
    create: true
    # -- ImagePullSecrets to automatically assign to the service account
    imagePullSecrets: []

  # -- Service settings for the webhook
  service:
    annotations:
      projectcontour.io/upstream-protocol.h2c: grpc
    type: ClusterIP

  # -- Annotations for webhook pods
  podAnnotations: {}
  # -- Additional webhook container environment variables
  podEnv: {}
  # -- Labels for webhook pods
  podLabels: {}
  # -- affinity for webhook deployment
  affinity: { }
  # -- nodeSelector for webhook deployment
  nodeSelector: { }
  # -- topologySpreadConstraints for webhook deployment
  topologySpreadConstraints: { }
  # -- nodeName constraints for webhook deployment
  nodeName: ""
  # -- tolerations for webhook deployment
  tolerations: [ ]
  # -- Sets securityContext for webhook pod(s).
  securityContext:
    fsGroup: 65534
    runAsNonRoot: true
    runAsUser: 1001
    fsGroupChangePolicy: "Always"
    seLinuxOptions:
      type: spc_t

  resources:
    requests:
      cpu: 200m
      ephemeral-storage: 500Mi
      memory: 500Mi

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 10
    metrics:
      - type: Resource
        resource:
          name: cpu
          target:
            type: Utilization
            averageUtilization: 80
      - type: Resource
        resource:
          name: memory
          target:
            type: Utilization
            averageUtilization: 80

# Container images
image:
    # -- Image repository for the operator and union services
  union:
    repository: public.ecr.aws/p0i0a9q8/unionoperator
    tag: ""
    pullPolicy: IfNotPresent
  # -- Kubestatemetrics repository and tag.
  kubeStateMetrics:
    repository: registry.k8s.io/kube-state-metrics/kube-state-metrics
    tag: v2.11.0
    pullPolicy: IfNotPresent
  # -- flytecopilot repository and tag.
  flytecopilot:
    repository: "cr.flyte.org/flyteorg/flytecopilot"
    tag: "v1.14.1"
    pullPolicy: IfNotPresent

metrics-server:
  enabled: false

# -- nodeobserver contains the configuration information for the node observer service.
nodeobserver:
  # -- Enable or disable nodeobserver
  enabled: false
  serviceAccount:
    name: ""
  podSecurityContext: { }
  securityContext:
    runAsNonRoot: false
    runAsUser: 0
    privileged: true
    capabilities:
      add: [ "SYS_ADMIN" ]
  # -- Additional pod annotations for the nodeobserver services
  podAnnotations: { }
  # -- Additional pod environment variables for the nodeobserver services
  podEnv:
    - name: KUBE_NODE_NAME
      valueFrom:
        fieldRef:
          fieldPath: spec.nodeName
    - name: LOG_LEVEL
      value: "4"
  # -- nodeSelector constraints for the pods associated with nodeobserver services
  nodeSelector: { }
  # -- topologySpreadConstraints for the pods associated with nodeobserver services
  topologySpreadConstraints: { }
  # -- tolerations for the pods associated with nodeobserver services
  tolerations:
    - effect: NoSchedule
      operator: Exists
  # -- affinity configurations for the pods associated with nodeobserver services
  affinity: { }
  # -- nodeName constraints for the pods associated with nodeobserver services
  nodeName: ""
  # -- Kubernetes resource configuration for the nodeobserver service
  resources:
    limits:
      cpu: "1"
      memory: "500Mi"
    requests:
      cpu: "500m"
      memory: "100Mi"
  config:
    criticalDaemonSets: []
    #  - name: union-mountpoint
    #    namespace: '{{ tpl .Release.Namespace . }}'
    #  - name: unionai-dataplane-fluentbit
    #    namespace: '{{ tpl .Release.Namespace . }}'

# -- Union Object Store configuration
objectStore:
  service:
    httpPort: 8080
    grpcPort: 8089

# Union operator configuration.
operator:
  serviceAccount:
    create: true
    name: operator-system
  autoscaling:
    enabled: false
    # minReplicas: 1
    # maxReplicas: 20
    # targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80
  replicas: 1
  podAnnotations: { }
  podLabels: { }
  priorityClassName: ""
  imagePullSecrets: { }
  podEnv: { }
  # -- nodeSelector constraints for the operator pods
  nodeSelector: { }
  # -- topologySpreadConstraints for the operator pods
  topologySpreadConstraints: { }
  # -- tolerations for the operator pods
  tolerations: [ ]
  # -- affinity configurations for the operator pods
  affinity: { }
  # -- nodeName constraints for the operator pods
  nodeName: ""
  podSecurityContext: { }
  enableTunnelService: true
  secretName: union-secret-auth
  securityContext: { }
  resources:
    limits:
      cpu: "2"
      memory: "4Gi"
    requests:
      cpu: "2"
      memory: "4Gi"

# Enable access to dataplane services.
ingress:
  enabled: false

  # The default host, ommitted if empty.
  host: ""

  # -- Dataproxy specific ingress configuration.
  dataproxy:
    # -- Ingress host
    hostOverride: "" # Can references Kubernetes service DNS, e.g. dataproxy-service.{{ .Release.Namespace }}.svc.cluster.local
    # -- Ingress class name
    class: ""
    # -- Annotations to apply to the ingress resource.
    annotations: {}
    # -- Ingress TLS configuration
    tls: {}

  # -- Serving specific ingress configuration.
  serving:
    # -- (Optional) Host override for serving ingress rule. Defaults to *.apps.{{ .Values.host }}.
    hostOverride: ""
    # -- Ingress class name
    class: ""
    # -- Annotations to apply to the ingress resource.
    annotations: {}
    # -- Ingress TLS configuration
    tls: {}


# -- Prometheus configuration
prometheus:
  additionalPrometheusRulesMap: { }
  #  rule-name:
  #    groups:
  #    - name: my_group
  #      rules:
  #      - record: my_record
  #        expr: 100 * my_record
  nameOverride: ""
  fullnameOverride: "union-operator"
  namespaceOverride: "union"
  kubeApiServer:
    enabled: false
  nodeExporter:
    enabled: false
  defaultRules:
    create: false
    rules:
      alertmanager: false
      etcd: false
      configReloaders: false
      general: false
      k8sContainerCpuUsageSecondsTotal: false
      k8sContainerMemoryCache: false
      k8sContainerMemoryRss: false
      k8sContainerMemorySwap: false
      k8sContainerResource: false
      k8sContainerMemoryWorkingSetBytes: false
      k8sPodOwner: false
      kubeApiserverAvailability: false
      kubeApiserverBurnrate: false
      kubeApiserverHistogram: false
      kubeApiserverSlos: false
      kubeControllerManager: false
      kubelet: false
      kubeProxy: false
      kubePrometheusGeneral: false
      kubePrometheusNodeRecording: false
      kubernetesApps: false
      kubernetesResources: false
      kubernetesStorage: false
      kubernetesSystem: false
      kubeSchedulerAlerting: false
      kubeSchedulerRecording: false
      kubeStateMetrics: false
      network: false
      node: false
      nodeExporterAlerting: false
      nodeExporterRecording: false
      prometheus: false
      prometheusOperator: false
      windows: false
  crds:
    enabled: true
  grafana:
    enabled: false
    ingress:
      enabled: false
    dashboardsConfigMaps: { }
    # default: ""
    adminUser: admin
    adminPassword: union-dataplane
    additionalDataSources: [ ]
    admin:
      existingSecret: ""
      userKey: admin-user
      passwordKey: admin-password
  prometheus:
    enabled: true
    service:
      port: 80
    prometheusSpec:
      maximumStartupDurationSeconds: 900
      retention: 3d
      # Disable the nil uses helm values for the selectors.  This is disabled to make sure that
      # prometheus can scrape other externally managed services beyond the scope of the helm release.
      # If you want to limit the scope of the prometheus service to only the helm release, set this to true
      # and/or set the selectors to the appropriate values.
      ruleSelectorNilUsesHelmValues: false
      ruleSelector: {}
      scrapeConfigSelectorNilUsesHelmValues: false
      scrapeConfigSelector: {}
      serviceMonitorSelectorNilUsesHelmValues: false
      serviceMonitorSelector: {}
      podMonitorSelectorNilUsesHelmValues: false
      podMonitorSelector: {}
      resources:
        limits:
          cpu: "4"
          memory: "8Gi"
        requests:
          cpu: "4"
          memory: "8Gi"
      routePrefix: /prometheus/
  alertmanager:
    enabled: false
  prometheusOperator:
    fullnameOverride: prometheus-operator
  kube-state-metrics:
    namespaceOverride: "kube-system"
    metricRelabelings:
      - sourceLabels: [ "__name__" ]
        separator: ";"
        regex: "kube_pod_container_resource_(limits|requests)|kube_pod_status_phase|kube_node_(labels|status_allocatable|status_condition|status_capacity)|kube_namespace_labels|kube_pod_container_status_(waiting|terminated|last_terminated).*_reason|kube_daemonset_status_number_unavailable|kube_deployment_status_replicas_unavailable|kube_resourcequota|kube_pod_info|kube_node_info|kube_pod_container_status_restarts_total"
        action: keep
      - sourceLabels: [ "__name__", "phase" ]
        separator: ";"
        regex: "kube_pod_status_phase;(Succeeded|Failed)"
        action: drop
      # Replace insert nodename to assist Grafana joins
      - sourceLabels: [ "node" ]
        targetLabel: "nodename"
        regex: "(.*)" # copy the value as is
        action: replace
      # Ensure all cloud provider group names populate label_node_pool_name
      - sourceLabels: [ "label_node_group_name" ]
        action: replace
        # Assume GCP environments don't have label_node_group_name
        regex: "(.+)"
        targetLabel: "label_node_pool_name"

  prometheus-node-exporter:
    namespaceOverride: "kube-system"
  ingress:
    enabled: false
    annotations: { }
    hosts: [ ]

# -- Union operator proxy configuration
proxy:
  serviceAccount:
    create: true
    name: proxy-system
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 10
    targetCPUUtilizationPercentage: 80
#    targetMemoryUtilizationPercentage: 80
  secretManager:
    enabled: true
    type: K8s
    # -- Set the namespace for union managed secrets created through the native Kubernetes secret manager. If the namespace is not set,
    # the release namespace will be used.
    namespace: ""
  replicas: 1
  podAnnotations: { }
  podLabels: { }
  priorityClassName: ""
  imagePullSecrets: { }
  podEnv: { }
  # -- topologySpreadConstraints for the proxy pods
  topologySpreadConstraints: { }
  # -- nodeSelector constraints for the proxy pods
  nodeSelector: { }
  # -- tolerations for the proxy pods
  tolerations: [ ]
  # -- affinity configurations for the proxy pods
  affinity: { }
  # -- nodeName constraint for the proxy pods
  nodeName: ""
  podSecurityContext: { }
  enableTunnelService: true
  secretName: union-secret-auth
  securityContext: { }
  resources:
    limits:
      cpu: "4"
      memory: "8Gi"
    requests:
      cpu: "4"
      memory: "8Gi"

# -- Create global resource quotas for the cluster.
resourcequota:
  create: false

# -- Connection secrets for the Union control plane services.
secrets:
  admin:
    # -- Enable or disable the admin secret.  This is used to authenticate to the control plane.
    enable: true
    # -- Create the secret resource containing the client id and secret.  If set to false the user is responsible for creating the secret before the installation.
    create: true
    # -- The client secret used to authenticate to the control plane.  This will be provided by Union.
    clientSecret: ""
    # -- The client id used to authenticate to the control plane.  This will be provided by Union.
    clientId: dataplane-operator

sparkoperator:
  enabled: false
  plugin_config: { }

# -- Object storage configuration used by all Union services.
storage:
  # -- The storage provider to use.  Currently supports "compat", "aws", "oci", and "custom".
  provider: "compat"
  # -- The bucket name used for object storage.
  bucketName: '{{ .Values.global.METADATA_BUCKET }}'
  # -- The bucket name used for fast registration uploads.
  fastRegistrationBucketName: '{{ .Values.global.FAST_REGISTRATION_BUCKET }}'
  # -- Override the URL for signed fast registration uploads.  This is only used for local/sandbox installations.
  fastRegistrationURL: ""
  # -- The bucket region used for object storage.
  region: us-east-1
  # -- Disable SSL for object storage.  This should only used for local/sandbox installations.
  disableSSL: false
  # -- The authentication type.  Currently supports "accesskey" and "iam".
  authType: "accesskey"
  # -- The access key used for object storage.
  accessKey: ""
  # -- The secret key used for object storage.
  secretKey: ""
  # -- Define or override the endpoint used for the object storage service.
  endpoint: ""
  # -- Use path style instead of domain style urls to access the object storage service.
  s3ForcePathStyle: true
  enableMultiContainer: false
  # -- Internal service limits for object storage access.
  limits:
    maxDownloadMBs: 1024
  # -- Cache configuration for objects retrieved from object storage.
  cache:
    maxSizeMBs: 0
    targetGCPercent: 70
  # -- Define custom configurations for the object storage.  Only used if the provider is set to "custom".
  custom: { }
  # -- Injects the object storage access information into the pod environment variables.  Needed for providers that only support access and secret key based authentication.
  injectPodEnvVars: true
  # -- Define GCP specific configuration for object storage.
  gcp:
    projectId: ""

# -- Configure app serving and knative.
serving:
  # -- Enables the serving components. Installs Knative Serving. Knative-Operator must be running in the cluster for this to work. Enables app serving in operator.
  enabled: false
  # -- The number of replicas to create for all components for high availability.
  replicas: 2
  # -- Enables scraping of metrics from the serving component
  metrics: true
  # -- Additional configuration for Knative serving
  extraConfig: {}
  # -- Resources for serving components
  resources:
    3scale-kourier-gateway:
      kourier-gateway:
        limits:
          cpu: "2"
          memory: 2Gi
        requests:
          cpu: "1"
          memory: 1Gi
    net-kourier-controller:
      controller:
        limits:
          cpu: "1"
          memory: 1Gi
        requests:
          cpu: 500m
          memory: 500Mi

  # -- Union authentication and authorization configuration.
  auth:
    # -- Enable Union authentication and authorization envoy plugin.
    # -- Disabling is common if not leveraging Union Cloud SSO.
    enabled: true

# Enable the knative operator.  Required for app serving.
knative-operator:
  enabled: false

  crds:
    install: true

imageBuilder:
  enabled: false

  # -- The config map build-image container task attempts to reference.
  # -- Should not change unless coordinated with Union technical support.
  targetConfigMapName: "build-image-config"

  # -- The URI of the buildkitd service. Used for externally managed buildkitd services.
  # -- Leaving empty and setting imageBuilder.buildkit.enabled to true will create a buildkitd service.
  # -- E.g. "tcp://buildkitd.buildkit.svc.cluster.local:1234"
  buildkitUri: ""

  # -- The default repository to publish images to "registry" is not specified with imagespec.
  # -- Note, the build-image task will fail unless "registry" is specified or a default repository is provided.
  defaultRepository: ""

  # -- How build-image task and operator proxy will attempt to authenticate
  # -- Supported values are "noop", "google", "aws", "azure"
  # -- "noop" no authentication is attempted
  # -- "google" uses docker-credential-gcr to authenticate to the default registry
  # -- "aws" uses docker-credential-ecr-login to authenticate to the default registry
  # -- "azure" uses az acr login to authenticate to the default registry. Requires Azure Workload Identity to be enabled.
  authenticationType: "noop"

  buildkit:

    # -- Enable buildkit service within this release.
    enabled: true

    # -- The name to use for the buildkit deployment, service, configmap, etc.
    fullnameOverride: ""

    # -- deployment strategy for buildkit deployment
    deploymentStrategy: Recreate

    # -- Replicas count for Buildkit deployment
    replicaCount: 1

    # -- buildkit HPA configuration
    autoscaling:
      enabled: false
      minReplicas: 1
      maxReplicas: 2

      # -- Buildkit aggressively accepts build requests (maybe missing config somewhere)
      # -- Meaning it will create runc containers correspondingly.
      # -- max-parallelism limits the number of exec operations (E.G. RUN pip install)
      # -- However, large burst of requests can leave to significant builds waiting in queue
      # -- Put CPU utilization a little lower to promote faster scale out and reduce queue times for future requests
      # -- We can adjust this as needed.
      targetCPUUtilizationPercentage: 60

    image:
      # -- Image name
      repository: moby/buildkit
      # -- Pull policy
      pullPolicy: IfNotPresent
      # -- Image tag
      tag: "latest"

    # -- Default to non-rootless to support a wider range of linux kernels.
    rootless: false

    # -- Enable debug logging
    log:
      debug: false
      format: text

    # -- Buildkitd service configuration
    oci:
      # -- maxParalelism limits the number of concurrent builds, default is 0 (unbounded)
      maxParallelism: 0

    pdb:
      # -- Minimum available pods
      minAvailable: 1

    # -- Pod annotations
    podAnnotations: {}

    service:
      # -- Service type
      type: ClusterIP
      # -- Service port
      port: 1234
      # -- Static ip address for load balancer
      loadbalancerIp: ""
      # -- Service annotations
      annotations: {}

    # -- Resource definitions
    resources:
      requests:
        cpu: 2
        memory: 4Gi
        ephemeral-storage: 20Gi

    # -- Node selector
    nodeSelector: {}

    # -- Tolerations
    tolerations: []

    # -- Additional volumes to add to the pod
    additionalVolumes: []

    # -- Additional volume mounts to add to the buildkit container
    additionalVolumeMounts: []

# Disable by default, but can be explicityl enabled if needed.
ingress-nginx:
  enabled: false

  controller:

    # Disable admission webhooks for simplicity
    admissionWebhooks:
      enabled: false

    # Snippet annotations are required
    allowSnippetAnnotations: true
    config:
      annotations-risk-level: "Critical"
      grpc-connect-timeout: "1200"
      grpc-read-timeout: "604800"
      grpc-send-timeout: "604800"

    ingressClassResource:
      enabled: true # Enable even if not utilized
      default: false # Assume shared with controlplane and require explicit ingress class assignment.

      name: dataplane
      controllerValue: union.ai/dataplane

## -- Extra Kubernetes objects to deploy with the helm chart
extraObjects: []
