# -- Override the chart name.
nameOverride: ""
# -- Override the chart fullname.
fullnameOverride: ""
# -- Set the control plane host for your Union dataplane installation.  This will be provided by Union.
host: "foo.unionai.cloud"

# -- Cluster name should be shared with Union for proper functionality.
clusterName: ""
# -- Organization name should be provided by Union.
orgName: ""

# -- Define additional pod environment variables for all of the Union pods.
additionalPodEnvVars: { }
#  key1: "value1"
#  key2: "value2"
# -- Define additional pod annotations for all of the Union pods.
additionalPodAnnotations: { }
#  annotation1: "value1"
#  annotation2: "value2"
# -- Define additional pod labels for all of the Union pods.
additionalPodLabels: { }
#  label1: "value1"
#  label2: "value2"
# -- Define additional PodSpec values for all of the Union pods.
additionalPodSpec: { }

# -- Global kubernetes scheduling constraints that will be applied to the
# pods.  Application specific constraints will always take precedence.
scheduling:
  # -- See https://kubernetes.io/docs/concepts/scheduling-eviction/topology-spread-constraints
  topologySpreadConstraints: { }
  #  - maxSkew: 1
  #    topologyKey: zone
  #    whenUnsatisfiable: DoNotSchedule
  #    labelSelector:
  #      matchLabels:
  #        foo: bar
  # -- See https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node
  affinity: { }
  #  nodeAffinity:
  #    requiredDuringSchedulingIgnoredDuringExecution:
  #      nodeSelectorTerms:
  #        - matchExpressions:
  #            - key: zone
  #              operator: NotIn
  #              values:
  #                - zoneC
  # -- See https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node
  nodeSelector: { }
  #  key: "value"
    # -- See https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration
  tolerations: [ ]
  #  - key: "key1"
  #    operator: "Equal"
  #    value: "value1"
  #    effect: "NoSchedule"
  nodeName: ""

# -- This is the annotation key that is added to service accounts.  Used with GCP and AWS.
userRoleAnnotationKey: "eks.amazonaws.com/role-arn"
# -- This is the value of the annotation key that is added to service accounts. Used with GCP and AWS.
userRoleAnnotationValue: "arn:aws:iam::ACCOUNT_ID:role/flyte_project_role"

# -- clusterresourcesync contains the configuration information for the syncresources service.
clusterresourcesync:
  # -- Enable or disable the syncresources service
  enabled: true
  # -- Override service account values for the syncresources service
  serviceAccount:
    # -- Override the service account name for the syncresources service
    name: ""
  # -- Additional pod annotations for the syncresources service
  podAnnotations: { }
  # -- Additional pod environment variables for the syncresources service
  podEnv: { }
  # -- nodeSelector constraints for the syncresources pods
  nodeSelector: { }
  # -- topologySpreadConstraints for the syncresources pods
  topologySpreadConstraints: { }
  # -- tolerations for the syncresources pods
  tolerations: [ ]
  # -- affinity configurations for the syncresources pods
  affinity: { }
  # -- nodeName constraints for the syncresources pods
  nodeName: ""
  # -- Syncresources service configuration
  config:
    cluster_resources:
      # -- How frequently to sync the cluster resources
      refreshInterval: 5m
      # -- Start the cluster resource manager in standalone mode.
      standaloneDeployment: true
      # -- The path to the project the templates used to configure project resource quotas.
      templatePath: /etc/flyte/clusterresource/templates
      customData:
        - production:
            - projectQuotaCpu:
                value: "4096"
            - projectQuotaMemory:
                value: "2Ti"
            - projectQuotaNvidiaGpu:
                value: "256"
            - defaultUserRoleKey:
                value: '{{ tpl .Values.userRoleAnnotationKey . }}'
            - defaultUserRoleValue:
                value: '{{ tpl .Values.userRoleAnnotationValue . }}'
        - staging:
            - projectQuotaCpu:
                value: "4096"
            - projectQuotaMemory:
                value: "2Ti"
            - projectQuotaNvidiaGpu:
                value: "256"
            - defaultUserRoleKey:
                value: '{{ tpl .Values.userRoleAnnotationKey . }}'
            - defaultUserRoleValue:
                value: '{{ tpl .Values.userRoleAnnotationValue . }}'
        - development:
            - projectQuotaCpu:
                value: "4096"
            - projectQuotaMemory:
                value: "2Ti"
            - projectQuotaNvidiaGpu:
                value: "256"
            - defaultUserRoleKey:
                value: '{{ tpl .Values.userRoleAnnotationKey . }}'
            - defaultUserRoleValue:
                value: '{{ tpl .Values.userRoleAnnotationValue . }}'
      # -- The name of the cluster.  This should always be the same as the cluster name in the config.
      clusterName: '{{ include "getClusterName" . }}'
    # -- Additional configuration for the cluster resources service
    clusterResourcesPrivate:
      # -- Configuration of app serving services.
      app:
        isSelfServe: false
    # -- Connection information for the sync resources service to connect to the Union control plane.  This should not need to be changed.
    union:
      connection:
        host: 'dns:///{{ tpl .Values.host . }}'
      auth:
        type: ClientSecret
        clientId: '{{ tpl .Values.secrets.admin.clientId . }}'
        clientSecretLocation: /etc/union/secret/client_secret
        authorizationMetadataKey: "flyte-authorization"
        tokenRefreshWindow: 5m
  # -- The templates that are used to create and/or update kubernetes resources for Union projects.
  templates:
    # -- Template for namespaces resources
    - key: a_namespace
      value: |
        apiVersion: v1
        kind: Namespace
        metadata:
          name: {{ namespace }}
          labels:
            union.ai/namespace-type: flyte
        spec:
          finalizers:
          - kubernetes

    # -- Patch default service account
    - key: b_default_service_account
      value: |
        apiVersion: v1
        kind: ServiceAccount
        metadata:
          name: default
          namespace: {{ namespace }}
          annotations:
            {{ defaultUserRoleKey }}: {{ defaultUserRoleValue }}

    - key: c_project_resource_quota
      value: |
        apiVersion: v1
        kind: ResourceQuota
        metadata:
          name: project-quota
          namespace: {{ namespace }}
        spec:
          hard:
            limits.cpu: {{ projectQuotaCpu }}
            limits.memory: {{ projectQuotaMemory }}
            requests.nvidia.com/gpu: {{ projectQuotaNvidiaGpu }}
  # -- Kubernetes resource configuration for the syncresources service
  resources:
    limits:
      cpu: "1"
      memory: "500Mi"
    requests:
      cpu: "500m"
      memory: "100Mi"

# -- Global configuration settings for all Union services.
config:
  # -- Admin Client configuration [structure](https://pkg.go.dev/github.com/flyteorg/flytepropeller/pkg/controller/nodes/subworkflow/launchplan#AdminConfig)
  admin:
    event:
      type: admin
      rate: 500
      capacity: 1000
    admin:
      endpoint: 'dns:///{{ tpl .Values.host . }}'
      clientId: '{{ tpl .Values.secrets.admin.clientId . }}'
      clientSecretLocation: /etc/union/secret/client_secret
      insecure: false
  authorizer:
    type: noop
  # -- Catalog Client configuration [structure](https://pkg.go.dev/github.com/flyteorg/flytepropeller/pkg/controller/nodes/task/catalog#Config)
  # Additional advanced Catalog configuration [here](https://pkg.go.dev/github.com/lyft/flyteplugins/go/tasks/pluginmachinery/catalog#Config)
  catalog:
    catalog-cache:
      cache-endpoint: 'dns:///{{ tpl .Values.host . }}'
      endpoint: 'dns:///{{ tpl .Values.host . }}'
      insecure: false
      type: fallback
      use-admin-auth: true
  clusters:
    labelClusterMap: { }
    clusterConfigs: [ ]
  # -- Override any configuration settings.
  configOverrides:
    cache:
      # Overrides identity caching which is not available in the dataplane.
      identity:
        enabled: false
  # -- Copilot configuration
  copilot:
    plugins:
      k8s:
        # -- Structure documented [here](https://pkg.go.dev/github.com/lyft/flyteplugins@v0.5.28/go/tasks/pluginmachinery/flytek8s/config#FlyteCoPilotConfig)
        co-pilot:
          name: flyte-copilot-
          image: "{{ .Values.image.flytecopilot.repository }}:{{ .Values.image.flytecopilot.tag }}"
          start-timeout: 30s
  # -- Core propeller configuration
  core:
    # -- follows the structure specified [here](https://pkg.go.dev/github.com/flyteorg/flytepropeller/pkg/controller/config).
    propeller:
      rawoutput-prefix: "s3://{{ .Values.storage.bucketName }}"
      metadata-prefix: metadata/propeller
      workers: 4
      max-workflow-retries: 30
      workflow-reeval-duration: 30s
      downstream-eval-duration: 30s
      limit-namespace: "all"
      prof-port: 10254
      metrics-prefix: flyte
      enable-admin-launcher: true
      leader-election:
        lock-config-map:
          name: propeller-leader
          namespace: union
        enabled: true
        lease-duration: 15s
        renew-deadline: 10s
        retry-period: 2s
      queue:
        type: batch
        batching-interval: 2s
        batch-size: -1
        queue:
          type: maxof
          rate: 100
          capacity: 1000
          base-delay: 5s
          max-delay: 120s
        sub-queue:
          type: bucket
          rate: 10
          capacity: 100
      literal-offloading-config:
        enabled: true
    webhook:
      certDir: /etc/webhook/certs
      serviceName: flyte-pod-webhook
      secretManagerTypes: [Embedded]
      embeddedSecretManagerConfig:
        type: "{{ .Values.proxy.secretManager.type }}"
        k8sConfig:
          namespace: '{{ include "proxy.secretsNamespace" . }}'
  # -- Domains configuration for Union projects. This enables the specified number of domains across all projects in Union.
  domain:
    domains:
      - id: development
        name: development
      - id: staging
        name: staging
      - id: production
        name: production
  enabled_plugins:
    # -- Tasks specific configuration [structure](https://pkg.go.dev/github.com/flyteorg/flytepropeller/pkg/controller/nodes/task/config#GetConfig)
    tasks:
      # -- Plugins configuration, [structure](https://pkg.go.dev/github.com/flyteorg/flytepropeller/pkg/controller/nodes/task/config#TaskPluginConfig)
      task-plugins:
        # -- [Enabled Plugins](https://pkg.go.dev/github.com/lyft/flyteplugins/go/tasks/config#Config). Enable sagemaker*, athena if you install the backend
        # plugins
        enabled-plugins:
          - container
          - sidecar
          - k8s-array
          - agent-service
          - echo
        default-for-task-types:
          container: container
          sidecar: sidecar
          container_array: k8s-array
          # -- Uncomment to enable task type that uses Flyte Agent
          # bigquery_query_job_task: agent-service
  # -- Kubernetes specific Flyte configuration
  k8s:
    plugins:
      # -- Configuration section for all K8s specific plugins [Configuration structure](https://pkg.go.dev/github.com/lyft/flyteplugins/go/tasks/pluginmachinery/flytek8s/config)
      k8s:
        default-env-vars: [ ]
        default-cpus: 100m
        default-memory: 100Mi
  # -- Logging configuration
  logger:
    show-source: true
    level: 4
  # -- Configuration for the Union operator service
  operator:
    # -- Enables the operator service
    enabled: true
    # -- Enable app serving
    apps:
      enabled: "{{ .Values.serving.enabled }}"
    # -- Sync the configuration from the control plane. This will overwrite any configuration values set as part of the deploy.
    syncClusterConfig:
      enabled: false
    # -- Enable the cloudflare tunnel service for secure communication with the control plane.
    enableTunnelService: true
    # -- Set the cluster information for the operator service
    clusterId:
      # -- The organization name for the cluster.  This should match your organization name that you were provided.
      organization: "{{ .Values.orgName }}"
    # -- Dataplane cluster configuration.
    clusterData:
      # -- The client id used to authenticate to the control plane.  This will be provided by Union.
      appId: "{{ .Values.secrets.admin.clientId }}"
      # -- The hose name for control plane access. This will be provided by Union.
      cloudHostName: "{{ .Values.host }}"
      # -- The prefix for constructing object storage URLs.
      metadataBucketPrefix: "s3://"
      # -- The bucket name for object storage.
      bucketName: "{{ .Values.storage.bucketName }}"
      # -- The bucket region for object storage.
      bucketRegion: "{{ .Values.storage.region }}"
      userRoleKey: "{{ tpl (.Values.userRoleAnnotationKey | toString) $ }}"
      userRole: "{{ tpl (.Values.userRoleAnnotationValue | toString) $ }}"
      # -- For GCP only, the project id for object storage.
      gcpProjectId: "{{ .Values.storage.gcp.projectId }}"
    # -- Configuration for the usage reporting service.
    collectUsages:
      # -- Enable usage collection in the operator service.
      enabled: true
    # -- Heartbeat check configuration.
    dependenciesHeartbeat:
      # -- Define the propeller health check endpoint.
      propeller:
        endpoint: '{{ include "propeller.health.url" . }}'
      # -- Define the operator proxy health check endpoint.
      proxy:
        endpoint: '{{ include "proxy.health.url" . }}'
      # -- Define the prometheus health check endpoint.
      prometheus:
        endpoint: '{{ include "prometheus.health.url" . }}'
  # -- Configuration for the operator proxy service.
  proxy:
    # -- Secret manager configuration
    smConfig:
      # -- Enable or disable secret manager support for the Union dataplane.
      enabled: "{{ .Values.proxy.secretManager.enabled }}"
      # -- The type of secret manager to use.
      type: "{{ .Values.proxy.secretManager.type }}"
      # -- Kubernetes specific secret manager configuration.
      k8sConfig:
        namespace: '{{ include "proxy.secretsNamespace" . }}'
    persistedLogs:
      sourceType: ObjectStore
      objectStore:
        prefix: persisted-logs
        pathTemplate: "namespace-{{`{{.KubernetesNamespace}}`}}.pod-{{`{{.KubernetesPodName}}`}}.cont-{{`{{.KubernetesContainerName}}`}}"
  # -- Resource manager configuration
  resource_manager:
    # -- resource manager configuration
    propeller:
      resourcemanager:
        type: noop
  # Refer to the full [structure](https://pkg.go.dev/github.com/lyft/flyteadmin@v0.3.37/pkg/runtime/interfaces#ApplicationConfig) for documentation.
  schedulerConfig:
    scheduler:
      metricsScope: "flyte:"
      profilerPort: 10254
  # -- Section that configures shared union services
  sharedService:
    port: 8081
    features:
      gatewayV2: true
  # -- Section that configures how the Task logs are displayed on the UI. This has to be changed based on your actual logging provider.
  # Refer to [structure](https://pkg.go.dev/github.com/lyft/flyteplugins/go/tasks/logs#LogConfig) to understand how to configure various
  # logging engines
  task_logs:
    plugins:
      logs:
        kubernetes-enabled: false
        # -- One option is to enable cloudwatch logging for EKS, update the region and log group accordingly
        cloudwatch-enabled: false
        templates:
          - displayName: Task Logs
            scheme: TaskExecution
            templateUris:
              - "/console/projects/{{`{{.executionProject}}`}}/domains/{{`{{.executionDomain}}`}}/executions/{{`{{.executionName}}`}}/nodeId/{{`{{.nodeID}}`}}/taskId/{{`{{.taskID}}`}}/attempt/{{`{{.taskRetryAttempt}}`}}/view/logs?duration=all&fromExecutionNav=true"
        dynamic-log-links:
          - vscode:
              displayName: VS Code Debugger
              templateUris:
                - "/dataplane/pod/v1/generated_name/task/{{`{{.executionProject}}`}}/{{`{{.executionDomain}}`}}/{{`{{.executionName}}`}}/{{`{{.nodeID}}`}}/{{`{{.taskRetryAttempt}}`}}/{{`{{.taskProject}}`}}/{{`{{.taskDomain}}`}}/{{`{{.taskID}}`}}/{{`{{.taskVersion}}`}}/"
  # -- Task default resources configuration
  # Refer to the full [structure](https://pkg.go.dev/github.com/lyft/flyteadmin@v0.3.37/pkg/runtime/interfaces#TaskResourceConfiguration).
  task_resource_defaults:
    # -- Task default resources parameters
    task_resources:
      defaults:
        cpu: 100m
        memory: 500Mi
      limits:
        cpu: 2
        memory: 1Gi
        # Maybe `0`?
        gpu: 1
  # -- Connection information to the union control plane.
  union:
    connection:
      host: "dns:///{{ .Values.host }}"
    auth:
      type: ClientSecret
      clientId: "{{ .Values.secrets.admin.clientId }}"
      clientSecretLocation: /etc/union/secret/client_secret
      authorizationMetadataKey: "flyte-authorization"
      tokenRefreshWindow: 5m

# -- Databricks integration configuration
databricks:
  enabled: false
  plugin_config: { }

# -- Dcgm exporter configuration
dcgmExporter:
  # -- Enable or disable the dcgm exporter
  enabled: false
  # -- Additional arguments to pass to the dcgm exporter.
  arguments: ["-f", "/etc/dcgm-exporter/dcp-metrics-included.csv"]
  # -- Service account configuration for the dcgm exporter
  serviceAccount:
    create: true
    annotations: { }
    name: "dcgm-exporter-system"
  podSecurityContext: { }
  securityContext:
    runAsNonRoot: false
    runAsUser: 0
    privileged: true
    capabilities:
      add: [ "SYS_ADMIN" ]
  affinity: { }
  tolerations: { }
  resources:
    limits:
      cpu: 100m
      ephemeral-storage: 500Mi
      memory: 400Mi
    requests:
      cpu: 100m
      ephemeral-storage: 500Mi
      memory: 128Mi
  kubeletPath: "/var/lib/kubelet/pod-resources"
  extraHostVolumes:
    - name: nvidia-install-dir-host
      hostPath: /home/kubernetes/bin/nvidia
  extraVolumeMounts:
    - name: nvidia-install-dir-host
      mountPath: /usr/local/nvidia
      readOnly: true

# -- Configuration for fluentbit used for the persistent logging feature.
fluentbit:
  enabled: true
  existingConfigMap: fluentbit-system
  # Allow fluentbit to run on all nodes to be able to push all logs.
  tolerations:
    - operator: Exists
  serviceAccount:
    name: fluentbit-system
  # If you are using EKS and would like to use the IAM role for service account (IRSA) feature,
  # uncomment the following line and set the role ARN
    annotations: {}  # eks.amazonaws.com/role-arn: <role>
  # If you would like to use access keys, uncomment the following lines and set the access key and secret key
  env: [ ]
  #  - name: AWS_ACCESS_KEY_ID
  #    value:
  #  - name: AWS_SECRET_ACCESS_KEY
  #    value:


# -- Flyteagent configuration
flyteagent:
  enabled: false
  plugin_config: { }

# -- Flytepropeller configuration
flytepropeller:
  enabled: true
  priorityClassName: "system-cluster-critical"
  # -- Replicas count for Flytepropeller deployment
  replicaCount: 1
  # -- Default resources requests and limits for Flytepropeller deployment
  resources:
    limits:
      cpu: "2"
      memory: "4Gi"
    requests:
      cpu: "2"
      memory: "4Gi"

  cacheSizeMbs: 0

  # -- Default regex string for searching configuration files
  configPath: /etc/flyte/config/*.yaml

  # -- Configuration for service accounts for FlytePropeller
  serviceAccount:
    # -- Should a service account be created for FlytePropeller
    create: true
    # -- Annotations for ServiceAccount attached to FlytePropeller pods
    annotations: { }
    # -- ImapgePullSecrets to automatically assign to the service account
    imagePullSecrets: [ ]
  # -- Labels for the Flytepropeller pods
  podLabels: { }
  # -- Annotations for Flytepropeller pods
  podAnnotations: { }
  # -- nodeSelector for Flytepropeller deployment
  nodeSelector: { }
  # -- tolerations for Flytepropeller deployment
  tolerations: [ ]
  # -- affinity for Flytepropeller deployment
  affinity: { }
  # -- topologySpreadConstraints for Flytepropeller deployment
  topologySpreadConstraints: { }
  # -- nodeName constraints for Flytepropeller deployment
  nodeName: ""
  # -- extra arguments to pass to propeller.
  extraArgs: { }

  additionalContainers: { }
  terminationMessagePolicy: ""

  service:
    enabled: true
    additionalPorts:
      - name: fasttask
        port: 15605
        targetPort: 15605
        protocol: TCP

  podEnv: { }

  secretName: union-secret-auth

# -- Configuration for the Flytepropeller webhook
flytepropellerwebhook:
  # -- enable or disable secrets webhook
  enabled: true
  # -- Replicas
  replicaCount: 1
  # -- Sets priorityClassName for webhook pod
  priorityClassName: ""
  # -- Configuration for service accounts for the webhook
  serviceAccount:
    # -- Should a service account be created for the webhook
    create: true
    # -- ImagePullSecrets to automatically assign to the service account
    imagePullSecrets: []

  # -- Service settings for the webhook
  service:
    annotations:
      projectcontour.io/upstream-protocol.h2c: grpc
    type: ClusterIP

  # -- Annotations for webhook pods
  podAnnotations: {}
  # -- Additional webhook container environment variables
  podEnv: {}
  # -- Labels for webhook pods
  podLabels: {}
  # -- affinity for webhook deployment
  affinity: { }
  # -- nodeSelector for webhook deployment
  nodeSelector: { }
  # -- topologySpreadConstraints for webhook deployment
  topologySpreadConstraints: { }
  # -- nodeName constraints for webhook deployment
  nodeName: ""
  # -- tolerations for webhook deployment
  tolerations: [ ]
  # -- Sets securityContext for webhook pod(s).
  securityContext:
    fsGroup: 65534
    runAsNonRoot: true
    runAsUser: 1001
    fsGroupChangePolicy: "Always"
    seLinuxOptions:
      type: spc_t

  resources:
    requests:
      cpu: 200m
      ephemeral-storage: 500Mi
      memory: 500Mi

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 10
    metrics:
      - type: Resource
        resource:
          name: cpu
          target:
            type: Utilization
            averageUtilization: 80
      - type: Resource
        resource:
          name: memory
          target:
            type: Utilization
            averageUtilization: 80

# Container images
image:
    # -- Image repository for the operator and union services
  union:
    repository: public.ecr.aws/p0i0a9q8/unionoperator
    tag: ""
    pullPolicy: IfNotPresent
  # -- Kubestatemetrics repository and tag.
  kubeStateMetrics:
    repository: registry.k8s.io/kube-state-metrics/kube-state-metrics
    tag: v2.11.0
    pullPolicy: IfNotPresent
  # -- dcgm-exporter repository and tag.
  dcgmExporter:
    repository: nvcr.io/nvidia/k8s/dcgm-exporter
    tag: 3.1.7-3.1.4-ubuntu20.04
    pullPolicy: IfNotPresent
  # -- flytecopilot repository and tag.
  flytecopilot:
    repository: "cr.flyte.org/flyteorg/flytecopilot"
    tag: "v1.14.1"
    pullPolicy: IfNotPresent

integration:
  opencost: false

metrics-server:
  enabled: false

# -- Union Object Store configuration
objectStore:
  service:
    httpPort: 8080
    grpcPort: 8089

# Union operator configuration.
operator:
  serviceAccount:
    create: true
    name: operator-system
  autoscaling:
    enabled: false
    # minReplicas: 1
    # maxReplicas: 20
    # targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80
  replicas: 1
  podAnnotations: { }
  podLabels: { }
  priorityClassName: ""
  imagePullSecrets: { }
  podEnv: { }
  # -- nodeSelector constraints for the operator pods
  nodeSelector: { }
  # -- topologySpreadConstraints for the operator pods
  topologySpreadConstraints: { }
  # -- tolerations for the operator pods
  tolerations: [ ]
  # -- affinity configurations for the operator pods
  affinity: { }
  # -- nodeName constraints for the operator pods
  nodeName: ""
  podSecurityContext: { }
  enableTunnelService: true
  secretName: union-secret-auth
  securityContext: { }
  resources:
    limits:
      cpu: "2"
      memory: "4Gi"
    requests:
      cpu: "2"
      memory: "4Gi"

# -- Prometheus configuration
prometheus:
  additionalPrometheusRulesMap: { }
  #  rule-name:
  #    groups:
  #    - name: my_group
  #      rules:
  #      - record: my_record
  #        expr: 100 * my_record
  nameOverride: ""
  fullnameOverride: "union-operator"
  namespaceOverride: "union"
  kubeApiServer:
    enabled: false
  nodeExporter:
    enabled: false
  defaultRules:
    create: false
    rules:
      alertmanager: false
      etcd: false
      configReloaders: false
      general: false
      k8sContainerCpuUsageSecondsTotal: false
      k8sContainerMemoryCache: false
      k8sContainerMemoryRss: false
      k8sContainerMemorySwap: false
      k8sContainerResource: false
      k8sContainerMemoryWorkingSetBytes: false
      k8sPodOwner: false
      kubeApiserverAvailability: false
      kubeApiserverBurnrate: false
      kubeApiserverHistogram: false
      kubeApiserverSlos: false
      kubeControllerManager: false
      kubelet: false
      kubeProxy: false
      kubePrometheusGeneral: false
      kubePrometheusNodeRecording: false
      kubernetesApps: false
      kubernetesResources: false
      kubernetesStorage: false
      kubernetesSystem: false
      kubeSchedulerAlerting: false
      kubeSchedulerRecording: false
      kubeStateMetrics: false
      network: false
      node: false
      nodeExporterAlerting: false
      nodeExporterRecording: false
      prometheus: false
      prometheusOperator: false
      windows: false
  crds:
    enabled: true
  grafana:
    enabled: false
    ingress:
      enabled: false
    dashboardsConfigMaps: { }
    # default: ""
    adminUser: admin
    adminPassword: union-dataplane
    additionalDataSources: [ ]
    admin:
      existingSecret: ""
      userKey: admin-user
      passwordKey: admin-password
  prometheus:
    enabled: true
    service:
      port: 80
    prometheusSpec:
      resources:
        limits:
          cpu: "4"
          memory: "8Gi"
        requests:
          cpu: "4"
          memory: "8Gi"
      routePrefix: /prometheus/
  alertmanager:
    enabled: false
  prometheusOperator:
    fullnameOverride: prometheus-operator
  kube-state-metrics:
    namespaceOverride: "kube-system"
  prometheus-node-exporter:
    namespaceOverride: "kube-system"
  ingress:
    enabled: false
    annotations: { }
    hosts: [ ]

# -- Union operator proxy configuration
proxy:
  serviceAccount:
    create: true
    name: proxy-system
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 10
    targetCPUUtilizationPercentage: 80
#    targetMemoryUtilizationPercentage: 80
  secretManager:
    enabled: true
    type: K8s
    # -- Set the namespace for union managed secrets created through the native Kubernetes secret manager. If the namespace is not set,
    # the release namespace will be used.
    namespace: ""
  replicas: 1
  podAnnotations: { }
  podLabels: { }
  priorityClassName: ""
  imagePullSecrets: { }
  podEnv: { }
  # -- topologySpreadConstraints for the proxy pods
  topologySpreadConstraints: { }
  # -- nodeSelector constraints for the proxy pods
  nodeSelector: { }
  # -- tolerations for the proxy pods
  tolerations: [ ]
  # -- affinity configurations for the proxy pods
  affinity: { }
  # -- nodeName constraint for the proxy pods
  nodeName: ""
  podSecurityContext: { }
  enableTunnelService: true
  secretName: union-secret-auth
  securityContext: { }
  resources:
    limits:
      cpu: "4"
      memory: "8Gi"
    requests:
      cpu: "4"
      memory: "8Gi"

# -- Create global resource quotas for the cluster.
resourcequota:
  create: false

# -- Connection secrets for the Union control plane services.
secrets:
  admin:
    # -- Create the secret resource containing the client id and secret.  If set to false the user is responsible for creating the secret before the installation.
    create: true
    # -- The client secret used to authenticate to the control plane.  This will be provided by Union.
    clientSecret: ""
    # -- The client id used to authenticate to the control plane.  This will be provided by Union.
    clientId: dataplane-operator

sparkoperator:
  enabled: false
  plugin_config: { }

# -- Object storage configuration used by all Union services.
storage:
  # -- The storage provider to use.  Currently supports "compat", "aws", "oci", and "custom".
  provider: "compat"
  # -- The bucket name used for object storage.
  bucketName: ""
  # -- The bucket name used for fast registration uploads.
  fastRegistrationBucketName: ""
  # -- Override the URL for signed fast registration uploads.  This is only used for local/sandbox installations.
  fastRegistrationURL: ""
  # -- The bucket region used for object storage.
  region: us-east-1
  # -- Disable SSL for object storage.  This should only used for local/sandbox installations.
  disableSSL: false
  # -- The authentication type.  Currently supports "accesskey" and "iam".
  authType: "accesskey"
  # -- The access key used for object storage.
  accessKey: ""
  # -- The secret key used for object storage.
  secretKey: ""
  # -- Define or override the endpoint used for the object storage service.
  endpoint: ""
  # -- Use path style instead of domain style urls to access the object storage service.
  s3ForcePathStyle: true
  enableMultiContainer: false
  # -- Internal service limits for object storage access.
  limits:
    maxDownloadMBs: 1024
  # -- Cache configuration for objects retrieved from object storage.
  cache:
    maxSizeMBs: 0
    targetGCPercent: 70
  # -- Define custom configurations for the object storage.  Only used if the provider is set to "custom".
  custom: { }
  # -- Injects the object storage access information into the pod environment variables.  Needed for providers that only support access and secret key based authentication.
  injectPodEnvVars: true
  # -- Define GCP specific configuration for object storage.
  gcp:
    projectId: ""

# -- Configure app serving and knative.
serving:
  # -- Enables the serving components. Installs Knative Serving. Knative-Operator must be running in the cluster for this to work. Enables app serving in operator.
  enabled: false
  # -- The number of replicas to create for all components for high availability.
  replicas: 2
  # -- Enables scraping of metrics from the serving component
  metrics: true
  # -- Additional configuration for Knative serving
  extraConfig: {}
  # -- Resources for serving components
  resources:
    3scale-kourier-gateway:
      kourier-gateway:
        limits:
          cpu: "2"
          memory: 2Gi
        requests:
          cpu: "1"
          memory: 1Gi
    net-kourier-controller:
      controller:
        limits:
          cpu: "1"
          memory: 1Gi
        requests:
          cpu: 500m
          memory: 500Mi

# Enable the knative operator.  Required for app serving.
knative-operator:
  enabled: false
