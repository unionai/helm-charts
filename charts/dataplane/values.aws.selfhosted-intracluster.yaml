# ============================================================================
# Union Dataplane Configuration for Self-Hosted Intra-Cluster Deployment
# ============================================================================
# This configuration is for deploying Union dataplane in the SAME Kubernetes
# cluster as the Union control plane (co-located deployment).
#
# IMPORTANT: This file is ADDITIVE and must be used WITH values.aws.yaml:
#   helm install ... -f values.aws.yaml -f values.aws.selfhosted-intracluster.yaml
#
# Key differences from standard BYOC deployment:
# - Uses intra-cluster communication (no external networking)
# - No Cloudflare tunnel required
# - Can use self-signed certificates
# - No API key authentication (direct service-to-service)
# - More cost-effective for single-cluster deployments
# ============================================================================

# ----------------------------------------------------------------------------
# Configuration Variables to Replace
# ----------------------------------------------------------------------------
# Before deployment, replace these TODO placeholders:
#
# 1. CONTROL_PLANE_HOST - Internal ingress controller endpoint
#    Format: "dns:///SERVICE-NAME.NAMESPACE.svc.cluster.local"
#    Example: "dns:///controlplane-nginx-controller.union-cp.svc.cluster.local"
#    How to find: kubectl get svc -n union-cp | grep nginx-controller
#
# 2. INSECURE_SKIP_VERIFY - Skip SSL certificate verification
#    Set to: "true" if using self-signed certs, "false" for trusted certs
#    Default: "true" for intra-cluster with self-signed certificates
#
# 3. FLYTEADMIN_ENDPOINT - Internal Flyteadmin service endpoint
#    Format: "SERVICE-NAME.NAMESPACE.svc.cluster.local:PORT"
#    Example: "flyteadmin.union-cp.svc.cluster.local:81"
#    How to find: kubectl get svc -n union-cp flyteadmin
# ----------------------------------------------------------------------------

# ----------------------------------------------------------------------------
# Cluster Resource Sync Configuration
# ----------------------------------------------------------------------------
# Syncs Kubernetes resources (namespaces, service accounts, quotas) with
# the control plane using intra-cluster communication.

clusterresourcesync:
  config:
    union:
      connection:
        # Control plane host for intra-cluster communication
        # Example: "dns:///controlplane-nginx-controller.union-cp.svc.cluster.local"
        host: "" # TODO: Set to CONTROL_PLANE_HOST

        # Skip SSL certificate verification for self-signed certs
        # Set to true for self-signed certificates, false for trusted CA certs
        insecureSkipVerify: true # TODO: Set to INSECURE_SKIP_VERIFY

      # Disable authentication for direct intra-cluster service-to-service calls
      auth:
        enable: false

# ----------------------------------------------------------------------------
# Core Service Configuration
# ----------------------------------------------------------------------------
# Configure dataplane services to communicate with control plane services
# using Kubernetes internal networking (ClusterIP services).

config:
  admin:
    admin:
      # Flyteadmin endpoint (control plane admin service)
      # Example: "flyteadmin.union-cp.svc.cluster.local:81"
      endpoint: "" # TODO: Set to FLYTEADMIN_ENDPOINT

      # Use insecure (non-TLS) connection for intra-cluster HTTP communication
      insecure: true

      # Disable OAuth2 client credentials (not needed for intra-cluster)
      clientId: null
      clientSecretLocation: null

  catalog:
    # Catalog service for task caching and reuse
    catalog-cache:
      # Control plane host for catalog service
      # Example: "dns:///controlplane-nginx-controller.union-cp.svc.cluster.local"
      cache-endpoint: "" # TODO: Set to CONTROL_PLANE_HOST
      endpoint: "" # TODO: Set to CONTROL_PLANE_HOST

      # Use insecure connection for intra-cluster communication
      insecure: true

      # Disable admin authentication (direct service-to-service)
      use-admin-auth: false

  k8s:
    plugins:
      k8s:
        # Environment variables injected into all task pods
        # These allow task pods to connect to the control plane
        default-env-vars:
          # Override endpoint for task pods to use internal control plane
          - _U_EP_OVERRIDE: "" # TODO: Set to CONTROL_PLANE_HOST
          # Skip SSL verification if using self-signed certificates
          - _U_INSECURE_SKIP_VERIFY: "true" # TODO: Set to INSECURE_SKIP_VERIFY

  union:
    connection:
      # Control plane connection for Union services
      # Example: "dns:///controlplane-nginx-controller.union-cp.svc.cluster.local"
      host: # TODO: Set to CONTROL_PLANE_HOST

      # Skip SSL verification for self-signed certificates
      insecureSkipVerify: true # TODO: Set to INSECURE_SKIP_VERIFY

    auth:
      # Disable OAuth authentication for intra-cluster communication
      enable: false

  operator:
    # Disable Cloudflare tunnel (not needed for intra-cluster)
    enableTunnelService: false

    # Disable billable usage collector (typically for Union-managed control planes)
    billableUsageCollector:
      enabled: false

# ----------------------------------------------------------------------------
# Executor Configuration
# ----------------------------------------------------------------------------
# Configure how workflow tasks are executed.

executor:
  config:
    unionAuth:
      # Disable API key injection (not needed for intra-cluster communication)
      injectSecret: false

# ----------------------------------------------------------------------------
# Ingress Configuration
# ----------------------------------------------------------------------------
# Configure ingress for external access to dataplane services.

# Extra Kubernetes objects to be deployed alongside Union
extraObjects: []

# Ingress configuration for Union dataplane and serving
ingress:
  dataproxy:
    class: "dataplane"
  enabled: true

# NGINX Ingress controller for dataplane
ingress-nginx:
  enabled: true

  # Service name for the ingress controller
  # This creates a service: "dataplane-nginx-controller"
  # External traffic enters through this service
  fullnameOverride: "dataplane-nginx"

  controller:
    service:
      # Use ClusterIP for intra-cluster only (no external LoadBalancer)
      # Change to LoadBalancer or NodePort for external access
      type: "ClusterIP"
      ports:
        http: 80
        https: 443

    ingressClassResource:
      # Ingress class name used in Ingress resources
      name: "dataplane"

# ----------------------------------------------------------------------------
# Operator Configuration
# ----------------------------------------------------------------------------

operator:
  # Disable Cloudflare tunnel (not needed for intra-cluster deployment)
  enableTunnelService: false

# ----------------------------------------------------------------------------
# Monitoring Configuration
# ----------------------------------------------------------------------------

# Prometheus for metrics collection and monitoring
prometheus:
  prometheusOperator:
    admissionWebhooks:
      # Disable admission webhooks by default
      # Enable if you have cert-manager installed
      enabled: false

      # Optional: Enable webhooks with cert-manager
      # enabled: true
      # certManager:
      #   enabled: true
      #   issuerRef:
      #     group: "cert-manager.io"
      #     kind: "ClusterIssuer"
      #     name: "selfsigned-issuer"

      patch:
        enabled: false

# ----------------------------------------------------------------------------
# Secrets Configuration
# ----------------------------------------------------------------------------

secrets:
  admin:
    # Disable admin secret creation (OAuth not used for intra-cluster)
    enable: false
    create: false

# ----------------------------------------------------------------------------
# App Serving Configuration (Work in Progress)
# ----------------------------------------------------------------------------

serving:
  auth:
    # Disable authentication for serving (work in progress)
    enabled: false