# Create an empty secret that the first propeller pod will populate
apiVersion: v1
kind: Secret
metadata:
  name: flyte-pod-webhook
  namespace: {{ .Release.Namespace }}
type: Opaque
---
# Create the actual deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: flytepropeller-webhook
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "flytepropellerwebhook.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.flytepropellerwebhook.replicaCount }}
  selector:
    matchLabels:
      {{- include "flytepropellerwebhook.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "flytepropellerwebhook.podLabels" . | nindent 8 }}
      annotations:
        configChecksum: {{ include (print .Template.BasePath "/propeller/configmap.yaml") . | sha256sum | trunc 63 | quote }}
        {{- with .Values.flytepropellerwebhook.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        {{- include "global.podAnnotations" . | nindent 8 }}
    spec:
      {{- with .Values.flytepropellerwebhook.securityContext }}
      securityContext: {{ tpl (toYaml .) $ | nindent 8 }}
      {{- end }}
      serviceAccountName: flytepropeller-webhook-system
      {{- if .Values.flytepropellerwebhook.priorityClassName }}
      priorityClassName: {{ .Values.flytepropellerwebhook.priorityClassName }}
      {{- end }}
      initContainers:
        - name: generate-secrets
          image: "{{ .Values.image.union.repository }}:{{ .Values.image.union.tag }}"
          imagePullPolicy: "{{ .Values.image.union.pullPolicy }}"
          command:
            - flytepropeller
          args:
            - webhook
            - init-certs
            - --config
            - /etc/flyte/config/*.yaml
          env:
            {{- include "global.podEnvVars" . | nindent 10 }}
            {{- with .Values.flytepropellerwebhook.podEnv -}}
            {{- toYaml . | nindent 10 }}
            {{- end }}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop: ["ALL"]
          volumeMounts:
            - name: config-volume
              mountPath: /etc/flyte/config
      containers:
        - name: webhook
          image: "{{ .Values.image.union.repository }}:{{ .Values.image.union.tag }}"
          imagePullPolicy: "{{ .Values.image.union.pullPolicy }}"
          command:
            - flytepropeller
          args:
            - webhook
            - --config
            - /etc/flyte/config/*.yaml
          env:
            {{- include "global.podEnvVars" . | nindent 10 }}
            {{- if .Values.flytepropellerwebhook.podEnv -}}
            {{- with .Values.flytepropellerwebhook.podEnv -}}
            {{- toYaml . | nindent 10 }}
            {{- end }}
            {{- end }}
          ports:
            - containerPort: 9443
            - containerPort: {{ index .Values.config.core.propeller "prof-port" }}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop: ["ALL"]
          {{- with .Values.flytepropellerwebhook.resources }}
          resources: {{- toYaml . | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: config-volume
              mountPath: /etc/flyte/config
              readOnly: true
            - name: webhook-certs
              mountPath: /etc/webhook/certs
              readOnly: true
      volumes:
        - name: config-volume
          configMap:
            name: flyte-propeller-config
        - name: webhook-certs
          secret:
            secretName: flyte-pod-webhook
      {{- include "flytepropellerwebhook.scheduling" . | nindent 6 }}
      {{- include "additionalPodSpec" . | nindent 6 }}
