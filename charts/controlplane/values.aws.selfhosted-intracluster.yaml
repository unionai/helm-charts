# ============================================================================
# Union Control Plane Configuration for Self-Hosted Intra-Cluster Deployment
# ============================================================================
# This configuration is for deploying Union control plane in the SAME
# Kubernetes cluster as the Union dataplane (co-located deployment).
#
# IMPORTANT: This file is ADDITIVE and must be used WITH values.aws.yaml:
#   helm install ... -f values.aws.yaml -f values.aws.selfhosted-intracluster.yaml
#
# Key differences from standard deployment:
# - Uses intra-cluster communication (internal Kubernetes networking)
# - Requires TLS certificates for gRPC/HTTP2 with NGINX
# - Single-tenant mode with explicit organization configuration
# - Direct communication between control plane and dataplane services
# ============================================================================

# ----------------------------------------------------------------------------
# Configuration Variables to Replace
# ----------------------------------------------------------------------------
# IMPORTANT: This file is ADDITIVE and must be used WITH values.aws.yaml:
#   helm install -f values.aws.yaml -f values.aws.selfhosted-intracluster.yaml [...]
#
# Configure all base variables in values.aws.yaml, then add the intra-cluster
# specific variables below.
# ----------------------------------------------------------------------------

# ----------------------------------------------------------------------------
# SECTION 1: Intra-Cluster Global Configuration
# ----------------------------------------------------------------------------
# These globals will be deep-merged with globals from values.yaml and values.aws.yaml.

global:
  # Organization name (must match dataplane orgName)
  # Example: "acme-corp" or "my-organization"
  UNION_ORG: ""

  # Internal Flyteadmin service endpoint
  # Example: "flyteadmin.union-cp.svc.cluster.local:81"
  # Find with: kubectl get svc -n union-cp flyteadmin
  FLYTEADMIN_ENDPOINT: ""

  # Control plane ingress controller FQDN (for intra-cluster routing)
  # Example: "controlplane-nginx-controller.union-cp.svc.cluster.local"
  # Find with: kubectl get svc -n union-cp | grep nginx-controller
  CONTROLPLANE_INTRA_CLUSTER_HOST: ""

  # TLS secret configuration
  # Example namespace: "union-cp"
  TLS_SECRET_NAMESPACE: ""
  # Example name: "controlplane-tls-cert"
  TLS_SECRET_NAME: ""

  # Dataplane ingress controller URL
  # Example: "http://dataplane-nginx-controller.union.svc.cluster.local:80"
  # Find service with: kubectl get svc -n union | grep nginx-controller
  DATAPLANE_ENDPOINT: ""

# ----------------------------------------------------------------------------
# SECTION 2: Core Configuration Overrides
# ----------------------------------------------------------------------------
# These settings override the base values.aws.yaml for intra-cluster mode.

configMap:
  # Flyteadmin endpoint for intra-cluster communication
  admin:
    endpoint: '{{ .Values.global.FLYTEADMIN_ENDPOINT }}'
    insecure: true

  # Control plane connection configuration
  connection:
    # Use control plane ingress controller for intra-cluster routing
    rootTenantURLPattern: 'dns:///{{ .Values.global.CONTROLPLANE_INTRA_CLUSTER_HOST }}'

  # Shared service security configuration
  sharedService:
    security:
      # NOTE: Temporary configuration for single-tenant mode
      # Subject to removal in the future
      singleTenantOrgID: '{{ .Values.global.UNION_ORG }}'

  # Union service connection configuration
  union:
    connection:
      # gRPC requires TLS for HTTP/2 with NGINX
      # Cannot mix HTTP/1.1 and HTTP/2 on same listener without TLS
      insecure: false

      # Skip SSL verification if using self-signed certificates
      insecureSkipVerify: true

# ----------------------------------------------------------------------------
# SECTION 3: Console Configuration
# ----------------------------------------------------------------------------

console:
  env:
    # Single-tenant organization override
    - name: UNION_ORG_OVERRIDE
      value: '{{ .Values.global.UNION_ORG }}'

# ----------------------------------------------------------------------------
# SECTION 4: Extra Kubernetes Objects (OPTIONAL)
# ----------------------------------------------------------------------------
# Additional Kubernetes resources to deploy with the control plane.

extraObjects: []

# Example 1: Create a basic Kubernetes secret (requires manual data population)
# - apiVersion: "v1"
#   kind: "Secret"
#   metadata:
#     name: '{{ .Values.global.KUBERNETES_SECRET_NAME }}'

# Example 2: Use External Secrets Operator with AWS Secrets Manager
# Automatically syncs RDS credentials from AWS Secrets Manager
# Note: AWS_REGION and AWS_MANAGED_DB_SECRET_NAME should be added to globals
# - apiVersion: "external-secrets.io/v1"
#   kind: "SecretStore"
#   metadata:
#     name: "default"
#   spec:
#     provider:
#       aws:
#         region: '{{ .Values.global.AWS_REGION }}'
#         service: "SecretsManager"
#
# - apiVersion: "external-secrets.io/v1"
#   kind: "ExternalSecret"
#   metadata:
#     name: '{{ .Values.global.KUBERNETES_SECRET_NAME }}'
#   spec:
#     data:
#     - remoteRef:
#         key: '{{ .Values.global.AWS_MANAGED_DB_SECRET_NAME }}'
#         property: "password"
#       secretKey: "pass.txt"
#     refreshInterval: "1h"
#     secretStoreRef:
#       kind: "SecretStore"
#       name: "default"
#     target:
#       name: '{{ .Values.global.KUBERNETES_SECRET_NAME }}'

# Example 3: Use cert-manager for TLS certificate management
# Creates a self-signed certificate for intra-cluster TLS
# Requires cert-manager and a ClusterIssuer to be pre-installed
# - apiVersion: "cert-manager.io/v1"
#   kind: "Certificate"
#   metadata:
#     name: "controlplane-selfsigned-tls"
#   spec:
#     dnsNames:
#     - "localhost"
#     - '{{ .Values.global.CONTROLPLANE_INTRA_CLUSTER_HOST }}'
#     ipAddresses:
#     - "127.0.0.1"
#     issuerRef:
#       group: "cert-manager.io"
#       kind: "ClusterIssuer"
#       name: "selfsigned-issuer"
#     secretName: '{{ .Values.global.TLS_SECRET_NAME }}'

# ----------------------------------------------------------------------------
# SECTION 5: Flyte Core Configuration
# ----------------------------------------------------------------------------

flyte:
  configmap:
    adminServer:
      admin:
        # Flyteadmin endpoint via control plane ingress
        endpoint: 'dns:///{{ .Values.global.CONTROLPLANE_INTRA_CLUSTER_HOST }}'
        insecure: true

      connection:
        # Control plane connection pattern
        rootTenantURLPattern: 'dns:///{{ .Values.global.CONTROLPLANE_INTRA_CLUSTER_HOST }}'

      sharedService:
        security:
          # NOTE: Temporary configuration for single-tenant mode
          # Subject to removal in the future
          singleTenantOrgID: '{{ .Values.global.UNION_ORG }}'

# ----------------------------------------------------------------------------
# SECTION 6: Ingress Configuration
# ----------------------------------------------------------------------------

ingress:
  className: controlplane
  tls:
    # TLS configuration for intra-cluster HTTPS
    - hosts:
        - localhost
        - "{{ .Values.global.CONTROLPLANE_INTRA_CLUSTER_HOST }}"
      secretName: "{{ .Values.global.TLS_SECRET_NAME }}"

# ----------------------------------------------------------------------------
# SECTION 7: NGINX Ingress Controller
# ----------------------------------------------------------------------------

ingress-nginx:
  enabled: true

  # Consistent service naming
  fullnameOverride: controlplane-nginx

  controller:
    service:
      # ClusterIP for intra-cluster only (no external access)
      # Change to LoadBalancer or NodePort for external access
      type: ClusterIP
      ports:
        http: 80
        https: 443

    # Apply TLS certificate to all HTTPS connections
    extraArgs:
      # TODO (DIRECTLY CONFIGURE): Set to the values of {{ .Values.global.TLS_SECRET_NAMESPACE }}/{{ .Values.global.TLS_SECRET_NAME }}
      # nginx-ingress subchart does not support templating here directly.
      default-ssl-certificate: '<TLS_SECRET_NAMESPACE>/<TLS_SECRET_NAME>'

    # Admission webhooks configuration
    admissionWebhooks:
      enabled: false

      # Optional: Enable with cert-manager
      # enabled: true
      # certManager:
      #   enabled: true
      #   issuerRef:
      #     group: "cert-manager.io"
      #     kind: "ClusterIssuer"
      #     name: "selfsigned-issuer"

      patch:
        enabled: false

    ingressClassResource:
      # Separate ingress class from dataplane
      name: controlplane

# ----------------------------------------------------------------------------
# SECTION 8: Service-Specific Configuration
# ----------------------------------------------------------------------------

services:
  # Dataproxy service configuration
  dataproxy:
    configMap:
      dataproxy:
        # Connect to dataplane ingress controller
        secureTunnelTenantURLPattern: '{{ .Values.global.DATAPLANE_ENDPOINT }}'

  # Executions service configuration
  executions:
    configMap:
      executions:
        app:
          adminClient:
            connection:
              # Flyteadmin endpoint for executions service
              endpoint: '{{ .Values.global.FLYTEADMIN_ENDPOINT }}'
              insecure: true

