# ============================================================================
# Union Control Plane Configuration for Self-Hosted Intra-Cluster Deployment
# ============================================================================
# This configuration is for deploying Union control plane in the SAME
# Kubernetes cluster as the Union dataplane (co-located deployment).
#
# IMPORTANT: This file is ADDITIVE and must be used WITH values.aws.yaml:
#   helm install ... -f values.aws.yaml -f values.aws.selfhosted-intracluster.yaml
#
# Key differences from standard deployment:
# - Uses intra-cluster communication (internal Kubernetes networking)
# - Requires TLS certificates for gRPC/HTTP2 with NGINX
# - Single-tenant mode with explicit organization configuration
# - Direct communication between control plane and dataplane services
# ============================================================================

# ----------------------------------------------------------------------------
# Configuration Variables to Replace
# ----------------------------------------------------------------------------
# Before deployment, replace these TODO placeholders:
#
# 1. UNION_ORG - Organization name
#    Format: RFC 1123 compliant (lowercase alphanumeric and hyphens)
#    Example: "acme-corp" or "my-organization"
#    Note: Must match the orgName configured in dataplane
#
# 2. FLYTEADMIN_ENDPOINT - Internal Flyteadmin service endpoint
#    Format: "SERVICE-NAME.NAMESPACE.svc.cluster.local:PORT"
#    Example: "flyteadmin.union-cp.svc.cluster.local:81"
#    How to find: kubectl get svc -n union-cp flyteadmin
#
# 3. CONTROLPLANE_INTRA_CLUSTER_HOST - Control plane ingress controller FQDN
#    Format: "SERVICE-NAME.NAMESPACE.svc.cluster.local"
#    Example: "controlplane-nginx-controller.union-cp.svc.cluster.local"
#    How to find: kubectl get svc -n union-cp | grep nginx-controller
#    Note: Used for intra-cluster service-to-service communication
#
# 4. INSECURE_SKIP_VERIFY - Skip SSL certificate verification
#    Format: Boolean (true/false)
#    Set to: true if using self-signed certs, false for trusted CA
#    Default: true for self-signed certificates
#
# 5. TLS_SECRET_NAMESPACE - Kubernetes namespace for TLS secret
#    Format: Valid Kubernetes namespace name
#    Example: "union-cp" or "default"
#    Note: Namespace where TLS certificate secret is stored
#
# 6. TLS_SECRET_NAME - Kubernetes secret name for TLS certificates
#    Format: Valid Kubernetes secret name
#    Example: "controlplane-tls-cert" or "union-cp-tls"
#    Note: Secret should contain tls.crt and tls.key
#
# 7. DATAPLANE_HOST - Dataplane ingress controller FQDN
#    Format: "SERVICE-NAME.NAMESPACE.svc.cluster.local"
#    Example: "dataplane-nginx-controller.union.svc.cluster.local"
#    How to find: kubectl get svc -n union | grep nginx-controller
#
# 8. KUBERNETES_SECRET_NAME - Kubernetes secret for credentials (OPTIONAL)
#    Format: Valid Kubernetes secret name
#    Example: "union-controlplane-secrets"
#    Note: Only needed if creating secret via extraObjects
#
# 9. AWS_REGION - AWS region (OPTIONAL, for External Secrets Operator)
#    Format: AWS region code
#    Example: "us-west-2", "us-east-1"
#    Note: Only needed if using External Secrets Operator with AWS
#
# 10. AWS_MANAGED_DB_SECRET_NAME - AWS Secrets Manager secret (OPTIONAL)
#     Format: AWS Secrets Manager secret name
#     Example: "rds!cluster-abc123"
#     Note: Only if using AWS-managed RDS credentials
#     Reference: https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-secrets-manager.html
# ----------------------------------------------------------------------------

# ----------------------------------------------------------------------------
# SECTION 1: Core Configuration Overrides
# ----------------------------------------------------------------------------
# These settings override the base values.aws.yaml for intra-cluster mode.

configMap:
  # Flyteadmin endpoint for intra-cluster communication
  admin:
    endpoint: "" # TODO: Replace with FLYTEADMIN_ENDPOINT
    insecure: true

  # Control plane connection configuration
  connection:
    # Use control plane ingress controller for intra-cluster routing
    rootTenantURLPattern: "dns:///<CONTROLPLANE_INTRA_CLUSTER_HOST>" # TODO: Replace with CONTROLPLANE_INTRA_CLUSTER_HOST

  # Shared service security configuration
  sharedService:
    security:
      # Single-tenant mode: must match dataplane organization
      singleTenantOrgID: "" # TODO: Replace with UNION_ORG

  # Union service connection configuration
  union:
    connection:
      # gRPC requires TLS for HTTP/2 with NGINX
      # Cannot mix HTTP/1.1 and HTTP/2 on same listener without TLS
      insecure: false

      # Skip SSL verification if using self-signed certificates
      insecureSkipVerify: true # TODO: Replace with INSECURE_SKIP_VERIFY

# ----------------------------------------------------------------------------
# SECTION 2: Console Configuration
# ----------------------------------------------------------------------------

console:
  env:
    # Single-tenant organization override
    - name: UNION_ORG_OVERRIDE
      value: "" # TODO: Replace with UNION_ORG

# ----------------------------------------------------------------------------
# SECTION 3: Extra Kubernetes Objects (OPTIONAL)
# ----------------------------------------------------------------------------
# Additional Kubernetes resources to deploy with the control plane.

extraObjects: []

# Example 1: Create a basic Kubernetes secret (requires manual data population)
# - apiVersion: "v1"
#   kind: "Secret"
#   metadata:
#     name: "" # TODO: Replace with KUBERNETES_SECRET_NAME

# Example 2: Use External Secrets Operator with AWS Secrets Manager
# Automatically syncs RDS credentials from AWS Secrets Manager
# - apiVersion: "external-secrets.io/v1"
#   kind: "SecretStore"
#   metadata:
#     name: "default"
#   spec:
#     provider:
#       aws:
#         region: "" # TODO: Replace with AWS_REGION
#         service: "SecretsManager"
#
# - apiVersion: "external-secrets.io/v1"
#   kind: "ExternalSecret"
#   metadata:
#     name: "" # TODO: Replace with KUBERNETES_SECRET_NAME
#   spec:
#     data:
#     - remoteRef:
#         key: "" # TODO: Replace with AWS_MANAGED_DB_SECRET_NAME
#         property: "password"
#       secretKey: "pass.txt"
#     refreshInterval: "1h"
#     secretStoreRef:
#       kind: "SecretStore"
#       name: "default"
#     target:
#       name: "" # TODO: Replace with KUBERNETES_SECRET_NAME

# Example 3: Use cert-manager for TLS certificate management
# Creates a self-signed certificate for intra-cluster TLS
# Requires cert-manager and a ClusterIssuer to be pre-installed
# - apiVersion: "cert-manager.io/v1"
#   kind: "Certificate"
#   metadata:
#     name: "controlplane-selfsigned-tls"
#   spec:
#     dnsNames:
#     - "localhost"
#     - "controlplane-nginx-controller.union-cp.svc.cluster.local"
#     ipAddresses:
#     - "127.0.0.1"
#     issuerRef:
#       group: "cert-manager.io"
#       kind: "ClusterIssuer"
#       name: "selfsigned-issuer"
#     secretName: "" # TODO: Replace with TLS_SECRET_NAME

# ----------------------------------------------------------------------------
# SECTION 4: Flyte Core Configuration
# ----------------------------------------------------------------------------

flyte:
  configmap:
    adminServer:
      admin:
        # Flyteadmin endpoint via control plane ingress
        endpoint: "dns:///<CONTROLPLANE_INTRA_CLUSTER_HOST>" # TODO: Replace with CONTROLPLANE_INTRA_CLUSTER_HOST
        insecure: true

      connection:
        # Control plane connection pattern
        rootTenantURLPattern: "dns:///<CONTROLPLANE_INTRA_CLUSTER_HOST>" # TODO: Replace with CONTROLPLANE_INTRA_CLUSTER_HOST

      sharedService:
        security:
          # Single-tenant organization (must match dataplane)
          singleTenantOrgID: "" # TODO: Replace with UNION_ORG

# ----------------------------------------------------------------------------
# SECTION 5: Ingress Configuration
# ----------------------------------------------------------------------------

ingress:
  className: controlplane
  tls:
    # TLS configuration for intra-cluster HTTPS
    - hosts:
        - localhost
        - <CONTROLPLANE_INTRA_CLUSTER_HOST> # TODO: Replace with CONTROLPLANE_INTRA_CLUSTER_HOST
      secretName: "" # TODO: Replace with TLS_SECRET_NAME

# ----------------------------------------------------------------------------
# SECTION 6: NGINX Ingress Controller
# ----------------------------------------------------------------------------

ingress-nginx:
  enabled: true

  # Consistent service naming
  fullnameOverride: controlplane-nginx

  controller:
    service:
      # ClusterIP for intra-cluster only (no external access)
      # Change to LoadBalancer or NodePort for external access
      type: ClusterIP
      ports:
        http: 80
        https: 443

    # Apply TLS certificate to all HTTPS connections
    extraArgs:
      default-ssl-certificate: "<TLS_SECRET_NAMESPACE>/<TLS_SECRET_NAME>" # TODO: Replace TLS_SECRET_NAMESPACE and TLS_SECRET_NAME

    # Admission webhooks configuration
    admissionWebhooks:
      enabled: false

      # Optional: Enable with cert-manager
      # enabled: true
      # certManager:
      #   enabled: true
      #   issuerRef:
      #     group: "cert-manager.io"
      #     kind: "ClusterIssuer"
      #     name: "selfsigned-issuer"

      patch:
        enabled: false

    ingressClassResource:
      # Separate ingress class from dataplane
      name: controlplane

# ----------------------------------------------------------------------------
# SECTION 7: Service-Specific Configuration
# ----------------------------------------------------------------------------

services:
  # Dataproxy service configuration
  dataproxy:
    configMap:
      dataproxy:
        # Connect to dataplane ingress controller
        secureTunnelTenantURLPattern: "http://<DATAPLANE_HOST>:80" # TODO: Replace with DATAPLANE_HOST

  # Executions service configuration
  executions:
    configMap:
      executions:
        app:
          adminClient:
            connection:
              # Flyteadmin endpoint for executions service
              endpoint: "" # TODO: Replace with FLYTEADMIN_ENDPOINT
              insecure: true

