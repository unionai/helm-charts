# -- Postgres DB host used for all control plane services EXCEPT the queue service
# ScyllaDB is used exclusively by the queue service (configured in scylla section below)
# This Postgres configuration is REQUIRED even when scylla.enabled is true
dbHost: ""
# -- Postgres DB name used for control plane services (except queue service)
dbName: ""
# -- Postgres DB user used for control plane services (except queue service)
dbUser: ""
# -- Postgres DB password used for control plane services (except queue service)
dbPass: ""
# -- Set the S3 bucket name used for flyte storage
bucketName: ""
# -- Set the S3 bucket name used for artifacts storage
artifactsBucketName: ""

# -- Set the bucket region
region: us-east-2
# -- Set the image used for control plane services
image:
  repository: ""
  pullPolicy: IfNotPresent
  tag: ""

controlplane:
  enabled: true

replicaCount: 1
imagePullSecrets:
nameOverride: ""
fullnameOverride: ""
serviceAccount:
  create: true
  annotations: {}
podAnnotations:
  linkerd.io/inject: disabled
  prometheus.io/path: /metrics
  prometheus.io/port: "10254"
service:
  type: ClusterIP
  grpcport: 80
  httpport: 81
  debugport: 82
  connectport: 83
resources:
  limits:
    cpu: 500m
    memory: 512Mi
  requests:
    cpu: 250m
    memory: 250Mi
env:
- name: GOMEMLIMIT
  valueFrom:
    resourceFieldRef:
      resource: limits.memory
      divisor: "1"
- name: GOMAXPROCS
  valueFrom:
    resourceFieldRef:
      resource: limits.cpu
      divisor: "1"
autoscaling:
  enabled: true
  minReplicas: 1
  maxReplicas: 1
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80
secrets: {}
podMonitor:
  custom:
    enabled: false
    metricRelabelings: []
probe:
  enabled: false
serviceProfile:
  enabled: false
spreadConstraints:
  enabled: false
strategy:
  type: RollingUpdate
  rollingUpdate:
    maxUnavailable: 1
    maxSurge: 1
argo:
  enabled: false
externalSecrets:
  refreshInterval: 1h
  refs: {}
postgres-exporter:
  enabled: false
  fullnameOverride: postgres-exporter
  serviceMonitor:
    enabled: false
    labels:
      instance: union

ingress:

  # Enable Secret Service ingress routes
  secretService: true

  # Default to the ingress class being created in nginx-ingress chart.
  className: "controlplane"

  # TLS to apply to all ingress objects.
  # tls:

  # Host to use for all ingress objects.
  host:  "" # Set the DNS name of the ingress host used by you control plane

  # Whether to create separate ingress objects for gRPC and HTTP traffic.
  separateGrpcIngress: true

  # Universal ingress annotations.
  # Currently biased toward nginx-ingress controller
  annotations:
    # You can switch to v1 if needed using /console instead of /v2 which defaults to v2 unionconsole
    nginx.ingress.kubernetes.io/app-root: /v2
    nginx.ingress.kubernetes.io/service-upstream: "true"

    # Set RPS (requests per second) to 100, Burst is automatically computed to be 5x that number. If we decide to
    # bump rps, we should consider setting Burst separately through `limit-burst-multiplier`
    nginx.ingress.kubernetes.io/limit-rps: "100"
    nginx.ingress.kubernetes.io/proxy-body-size: 6m
    nginx.ingress.kubernetes.io/proxy-buffer-size: 32k
    nginx.ingress.kubernetes.io/proxy-buffers: 4 32k
    nginx.ingress.kubernetes.io/force-ssl-redirect: "false"
    nginx.ingress.kubernetes.io/proxy-cookie-domain: ~^ .$host
    nginx.ingress.kubernetes.io/server-snippet: |
      client_header_timeout 604800;
      client_body_timeout 604800;
      # Increasing the default configuration from
      #        client_header_buffer_size       1k;
      #        large_client_header_buffers     4 8k;
      # to default of 16k and 32k for large buffer sizes. These sizes are chosen as a short term mediation until we can collect data to reason
      # about expected header sizs (PE-1101).
      # Historically, we have seen is with the previous 8k max buffer size , the auth endpoint of /me would throw 400 Bad request and due to this ingress controller
      # threw a 500 as it doesn't expect this status code on auth request expected range :  200 <= authcall.status(i.e status of /me call) <=300
      # Code link for ref : https://github.com/nginx/nginx/blob/e734df6664e70f118ca3140bcef6d4f1750fa8fa/src/http/modules/ngx_http_auth_request_module.c#L170-L179
      # Now the main reason we have seen 400 bad request is large size of the cookies which contribute to the header size.
      # We should keep reducing the size of what headers are being sent meanwhile we increase this size to mitigate the long header issue.
      client_header_buffer_size 16k;
      large_client_header_buffers 64 32k;

  separateGrpcIngressAnnotations:
    # Must annotate gRPC ingress with this to ensure proper handling of gRPC traffic.
    nginx.ingress.kubernetes.io/backend-protocol: "GRPC"
  protectedIngressAnnotations:
    nginx.org/websocket-services: dataproxy-service
  enableProtectedConsoleIngress: false
  protectedIngressAnnotationsWithoutSignin:
    nginx.org/websocket-services: dataproxy-service
  protectedConsoleIngressAnnotations:
    # Ensure this cache key resolves as non-empty to avoid an unintended hit on a header-less request.
    # Specifically, the cache key should include the configurable authorization header and cookie header.
    # Make sure to update the key if a different authorization header is used.
    nginx.ingress.kubernetes.io/auth-cache-key: $http_flyte_authorization$http_cookie
    nginx.org/websocket-services: dataproxy-service
  protectedIngressAnnotationsGrpc:

configMap:
  authorizer:
    type: "Noop"
    internalCommunicationConfig:
      enabled: false
  cache:
    identity:
      enabled: false
  connection:
    environment: ""
    region: ""
    rootTenantURLPattern: dns:///your-controlplane-domain # e.g. dns:///staging.union.ai
  logger:
    level: 6
  otel:  # Ref: https://github.com/flyteorg/flyte/blob/master/flytestdlib/otelutils/config.go
    type: noop
  union:
    internalConnectionConfig:
      enabled: true
      urlPattern: "_SERVICE_.{{ .Release.Namespace }}.svc.cluster.local:80"
    auth:
      enable: false

services:
  artifacts:

    # Artifacts service migrations conflict with Executions services. In a subsequent PR we will force database
    # migrations to create separate databases.
    disabled: true

    fullnameOverride: "artifacts"
    initContainers:
      - name: migrate
        args:
          - artifacts
          - migrate
          - --config
          - "/etc/config/*.yaml"
    args:
      - artifacts
      - serve
      - --config
      - /etc/config/*.yaml
    configMap:
      sharedService:
        metrics:
          scope: "artifacts:"
      db:
        dbname: '{{ .Values.dbName }}'
        host: '{{ .Values.dbHost }}'
        options: sslmode=disable
        username: '{{ .Values.dbUser }}'
        port: 5432
        passwordPath: /etc/db/pass.txt
        connectionPool:
          maxIdleConnections: 20
          maxOpenConnections: 20
          maxConnectionLifetime: 1m
      artifactsConfig:
        app:
          adminClient:
            hackFlagUntilCellIsolation: true
          artifactBlobStoreConfig:
            container: '{{ .Values.artifactsBucketName }}'
            stow:
              config:
                auth_type: iam
                region: us-east-2
              kind: s3
            type: stow
          artifactDatabaseConfig:
            connMaxLifeTime: 1m
            maxIdleConnections: 20
            maxOpenConnections: 30
            # Duplicate for application postgres reference
            postgres:
              dbname: '{{ .Values.dbName }}'
              host: '{{ .Values.dbHost }}'
              options: sslmode=disable
              passwordPath: /etc/db/pass.txt
              port: 5432
              # Default to the same host as the primary DB.
              readReplicaHost: '{{ .Values.dbHost }}'
              username: '{{ .Values.dbUser }}'
          artifactServerConfig:
            httpPort: 8089
            port: 8080
            respectUserOrgsForServerless: true
          artifactTriggerConfig:
            executionMaxRetryCount: 3
            executionSchedulerQuerySize: 20
            executionSchedulers: 1
            executionSchedulersWait: 10
            triggerProcessorQuerySize: 100
            triggerProcessors: 1
            triggerProcessorsWait: 10
  authorizer:
    fullnameOverride: "authorizer"
    args:
      - authorizer
      - serve
      - --config
      - /etc/config/*.yaml
    configMap:
      sharedService:
        metrics:
          scope: "authorizer:"
  cluster:
    fullnameOverride: "cluster"
    initContainers:
      - name: migrate
        args:
          - cloudcluster
          - migrate
          - --config
          - "/etc/config/*.yaml"
    args:
      - cloudcluster
      - serve
      - --config
      - /etc/config/*.yaml
    configMap:
      sharedService:
        metrics:
          scope: "cluster:"
      cloudProvider:
        provider: Mock
      db:
        dbname: '{{ .Values.dbName }}'
        host: '{{ .Values.dbHost }}'
        username:  '{{ .Values.dbUser }}'
        passwordPath: /etc/db/pass.txt
        port: 5432
        connectionPool:
          maxIdleConnections: 20
          maxOpenConnections: 20
          maxConnectionLifetime: 1m
      cluster:
        cloudflare:
          active: false
  dataproxy:
    fullnameOverride: "dataproxy"
    args:
      - dataproxy
      - serve
      - --config
      - /etc/config/*.yaml
    configMap:
      sharedService:
        metrics:
          scope: "dataproxy:"
      dataproxy:
        secureTunnelTenantURLPattern: http://ingress-nginx-internal.ingress-nginx.svc.cluster.local:80 # http://ingress-nginx-internal.ingress-nginx.svc.cluster.local
        clusterSelector:
          type: local
  executions:
    fullnameOverride: "executions"
    initContainers:
      - name: migrate
        args:
          - cloudpropeller
          - migrate
          - --config
          - "/etc/config/*.yaml"
    args:
      - cloudpropeller
      - serve
      - --config
      - /etc/config/*.yaml
    configMap:
      workspace:
        enable: false
      sharedService:
        metrics:
          scope: "executions:"
      db:
        dbname: '{{ .Values.dbName }}'
        host:  '{{ .Values.dbHost }}'
        username:  '{{ .Values.dbUser }}'
        passwordPath: /etc/db/pass.txt
        port: 5432
        connectionPool:
          maxIdleConnections: 20
          maxOpenConnections: 20
          maxConnectionLifetime: 1m
      cloudEventsProcessor:
        cloudProvider: Local
      executions:

        # app:
          # adminClient:
            # connection:
              # -- Override rootTenantURLPattern for adminClient to point to control plane service.
              # endpoint: ""

              # -- Insecure should be true only for local testing with self-signed certs.
              # insecure: true|false

              # -- Skip TLS verification for self-signed certs. Should be true only for local testing.
              # insecureSkipVerify: true|false

        apps:
          # Identity service is disabled by default. Enriching identities can be enabled here.
          enrichIdentities: false
          publicURLPattern: https://%s.apps.%s.cloud-staging.union.ai

        # Enable V2 specific endpoints
        task:
          enabled: true
          # Identity service is disabled by default. Enriching identities can be enabled here.
          enrichIdentities: false
  usage:
    fullnameOverride: "usage"
    args:
      - usage
      - serve
      - --config
      - /etc/config/*.yaml
    configMap:
      sharedService:
        metrics:
          scope: "usage:"
      cloudProvider:
        provider: Mock
      billing:
        enable: false
    resources:
      limits:
        cpu: 3
        memory: 512Mi
      requests:
        cpu: 500m
        memory: 250Mi

  run-scheduler:
    fullnameOverride: "run-scheduler"
    args:
      - cloudpropeller
      - scheduler
      - start
      - --config
      - "/etc/config/*.yaml"
    initContainers:
      - name: migrate
        args:
          - cloudpropeller
          - migrate
          - --config
          - "/etc/config/*.yaml"
    configMap:
      sharedService:
        metrics:
          scope: "run-scheduler:"
      db:
        dbname: '{{ .Values.dbName }}'
        host:  '{{ .Values.dbHost }}'
        username:  '{{ .Values.dbUser }}'
        passwordPath: /etc/db/pass.txt
        port: 5432
        connectionPool:
          maxIdleConnections: 20
          maxOpenConnections: 20
          maxConnectionLifetime: 1m

  queue:
    fullnameOverride: "queue"
    args:
      - queue
      - serve
      - '--config'
      - /etc/config/*.yaml
    initContainers:
      - name: migrate
        args:
          - queue
          - migrate
          - --config
          - "/etc/config/*.yaml"
    configMap:
      sharedService:
        metrics:
          scope: "queue:"
      queue:
        db:
          hosts:
            - "{{ .Values.scylla.fullnameOverride }}-client.{{ .Release.Namespace }}.svc.cluster.local"
          threadCount: 64
          type: cql
        eventer:
          recordActionThreadCount: 16
          type: runservice
          updateActionStatusThreadCount: 16


# Union console configuration.
console:
  replicaCount: 1

  image:
    repository: ""
    pullPolicy: IfNotPresent
    tag: ""

  nameOverride: ""
  fullnameOverride: ""

  serviceAccount:
    create: true
    annotations: {}
    name: ""

  podAnnotations:
    kubectl.kubernetes.io/default-container: unionconsole

  podLabels: {}

  podSecurityContext:
    runAsNonRoot: true
    runAsUser: 1000
    fsGroupChangePolicy: OnRootMismatch
    seLinuxOptions:
      type: spc_t

  securityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL

  service:
    type: ClusterIP
    port: 80
    targetPort: 8080
    metricsPort: 8081
    annotations: {}

  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 250m
      memory: 250Mi

  # Environment variables
  env: []

  # Additional environment variables from ConfigMap
  envFrom: []

  nodeSelector: {}

  tolerations: []

  affinity: {}

  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1

flyte:
  # All the value below need to be duplicated due to flyte-core being a subchart.
  # -- Postgres DB host used for tenant services (not queue service)
  # ScyllaDB is used exclusively by the queue service
  # This Postgres configuration is REQUIRED even when scylla.enabled is true
  dbHost: ""
  # -- Postgres DB name used for control plane services (except queue service)
  dbName: ""
  # -- Postgres DB user used for control plane services (except queue service)
  dbUser: ""
  # -- Set the DB password used for the controlplane services
  dbPass: ""
  # -- Set the S3 bucket name used for flyte storage
  bucketName: ""
  # -- Set the bucket region
  region: ""

  flyteadmin:
    replicaCount: 1
    # -- Set the image used for flyteadmin
    image:
      repository: ""
      pullPolicy: IfNotPresent
      tag:  ""
    serviceAccount:
      annotations:
        # -- Set the role arn for the flyteadmin service account which has access to the S3 bucket
    podAnnotations:
      kubectl.kubernetes.io/default-container: flyteadmin
    initialProjects:
      - union-health-monitoring
      - flytesnacks
    readinessProbe: |-
      httpGet:
        path: /healthcheck
        port: 8088
      initialDelaySeconds: 15
      timeoutSeconds: 1
      periodSeconds: 10
      successThreshold: 1
      failureThreshold: 3

    livenessProbe: |-
      httpGet:
        path: /healthcheck
        port: 8088
      initialDelaySeconds: 20
      timeoutSeconds: 1
      periodSeconds: 5
      successThreshold: 1
      failureThreshold: 3
    resources:
      limits:
        cpu: 2
        ephemeral-storage: 500Mi
        memory: 3Gi
      requests:
        cpu: 50m
        ephemeral-storage: 200Mi
        memory: 500Mi

  workflow_scheduler:
    enabled: false
    type: native

  datacatalog:
    enabled: true
    replicaCount: 1
    image:
      repository: "" # -- Set the repository for the public datacatalog image"
      tag: "" # -- Set the tag for the public datacatalog image
      pullPolicy: "IfNotPresent" # -- Set the pull policy for the datacatalog image
    resources:
      limits:
        cpu: 1
        ephemeral-storage: 500Mi
        memory: 1Gi
      requests:
        cpu: 10m
        ephemeral-storage: 50Mi
        memory: 50Mi
    serviceAccount:
      annotations:
        # -- Set the role arn for the datacatlog service account which has access to the S3 bucket
    service:
      type: ClusterIP
  flytepropeller:
    enabled: false
  flyteconsole:
    enabled: true
    podEnv: []
    replicaCount: 1
    image:
      repository: "" # -- Set the repository for the console image"
      tag: "" # -- Set the tag for the console image
    resources:
      # flyteconsole service has less memory footprint but cpu goes up depends on traffic, If CPU use is high then we will use HPA
      limits:
        cpu: 250m
        memory: 250Mi
        ephemeral-storage: 200Mi # Pre-liminary limit to avoid runaway disk usage
      requests:
        cpu: 10m
        memory: 50Mi
        ephemeral-storage: 20Mi
    serviceAccount:
      create: true
    podAnnotations:
      linkerd.io/inject: disabled
      prometheus.io/scrape: "false"
    ga:
      enabled: true
      tracking_id: ""
    service:
      annotations:
        service.beta.kubernetes.io/aws-load-balancer-connection-idle-timeout: "600"
        external-dns.alpha.kubernetes.io/hostname: "flyte.example.com"
      type: ClusterIP
    serviceMonitor:
      enabled: false
  webhook:
    enabled: false
  cluster_resource_manager:
    enabled: false
  cacheservice:
    enabled: true
    replicaCount: 1
    image:
      repository: "" # -- Set the repository for the private cacheservice image"
      tag: "" # -- Set the tag for the private cacheservice datacatalog image
      pullPolicy: "IfNotPresent" # -- Set the pull policy for the private cacheservice  image
    serviceAccount:
      # -- If the service account is created by you, make this false
      create: true
      annotations:
      # -- Set the role arn for the cacheservice service account which has access to the S3 bucket
    resources:
      limits:
        cpu: 1
        ephemeral-storage: 200Mi
      requests:
        cpu: 500m
        ephemeral-storage: 200Mi
        memory: 200Mi
    configPath: /etc/cacheservice/config/*.yaml
    affinity:
      podAntiAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                app.kubernetes.io/name: cacheservice
            topologyKey: kubernetes.io/hostname

    service:
      annotations: { }
      type: ClusterIP
    # -- Annotations for Cacheservice pods
    podAnnotations: { }
    # -- Additional Cacheservice container environment variables
    podEnv: { }
    # -- Labels for Cacheservice pods
    podLabels: { }
    # -- nodeSelector for Cacheservice deployment
    nodeSelector: { }
    # -- tolerations for Cacheservice deployment
    tolerations: [ ]
    # -- Appends additional volumes to the deployment spec. May include template values.
    additionalVolumes: [ ]
    # -- Appends additional volume mounts to the main container's spec. May include template values.
    additionalVolumeMounts: [ ]
    # -- Appends additional containers to the deployment spec. May include template values.
    additionalContainers: [ ]
    # -- Appends extra command line arguments to the main command
    extraArgs: { }
    # -- Sets priorityClassName for cacheservice pod(s).
    priorityClassName: ""
    # -- Sets securityContext for cacheservice pod(s).
    securityContext:
      runAsNonRoot: true
      fsGroup: 1001
      runAsUser: 1001
      fsGroupChangePolicy: "OnRootMismatch"
      seLinuxOptions:
        type: spc_t
  common:
    databaseSecret:
      name: db-pass
      secretManifest:
        # -- Leave it empty if your secret already exists
        # Else you can create your own secret object. You can use Kubernetes secrets, else you can configure external secrets
        # For external secrets please install Necessary dependencies, like, of your choice
        # - https://github.com/hashicorp/vault
        # - https://github.com/godaddy/kubernetes-external-secrets
        apiVersion: v1
        kind: Secret
        metadata:
          name: db-pass
        type: Opaque
        stringData:
          # -- If using plain text you can provide the password here
          pass.txt: '{{ .Values.dbPass }}'
    ingress:
      # Disables flyte subchart ingresses.
      enabled: false

  storage:
    # -- Sets the storage type. Supported values are sandbox, s3, gcs and custom.
    type: s3
    # -- bucketName defines the storage bucket flyte will use. Required for all types except for sandbox.
    bucketName: '{{ .Values.bucketName }}'
    s3:
      region: "{{ .Values.region }}"
    cache:
      maxSizeMBs: 1024
  db:
    checks: false
    datacatalog:
      database:
        port: 5432
        # -- Create a user called flyteadmin
        username: "{{ .Values.dbUser }}"
        host: "{{ .Values.dbHost }}"
        # -- Use a specific DB name for datacatalog
        dbname: datacatalog
        passwordPath: /etc/db/pass.txt
        maxIdleConnections: 10
        maxOpenConnections: 20
        connMaxLifeTime: 120s
    admin:
      database:
        port: 5432
        # -- Create a user called flyteadmin
        username: "{{ .Values.dbUser }}"
        host: "{{ .Values.dbHost }}"
        # -- Use a specific DB name for flyteadmin
        dbname: flyteadmin
        passwordPath: /etc/db/pass.txt
        maxIdleConnections: 10
        maxOpenConnections: 80
        connMaxLifeTime: 120s
    cacheservice:
      database:
        port: 5432
        # -- Create a user called flyteadmin
        username: "{{ .Values.dbUser }}"
        host: "{{ .Values.dbHost }}"
        # -- Use a specific DB name for cacheservice
        dbname: cacheservice
        passwordPath: /etc/db/pass.txt
        maxIdleConnections: 10
        maxOpenConnections: 20
        connMaxLifeTime: 120s
  configmap:
    adminServer:
      admin:
        endpoint: dns:///your-controlplane-domain
        insecure: false
      authorizer:
        type: "Noop"
        internalCommunicationConfig:
          enabled: false
      cloudEvents:
        enable: false
      connection:
        environment: ""
        region: ""
        rootTenantURLPattern: dns:///your-controlplane-domain # e.g. dns:///staging.union.ai
      flyteadmin:
        metricsKeys:
          - phase
        useOffloadedInputs: true
        useOffloadedWorkflowClosure: true
        # See: https://github.com/unionai/flyte/pull/733/files
        testing: null
      otel:  # Ref: https://github.com/flyteorg/flyte/blob/master/flytestdlib/otelutils/config.go
        type: noop
      private:
        app:
          cacheProviderConfig:
            kind: bypass
          # Don't rely on user API to exists
          populateUserFields: false
      server:
        security:
          useAuth: false
      union:
        internalConnectionConfig:
          enabled: true
          urlPattern: '{{ printf "_SERVICE_.%s.svc.cluster.local:80" .Release.Namespace }}'
      sharedService:
        # Flyteadmin container and service parts hardcoded and should not change.
        # https://github.com/flyteorg/flyte/blob/v1.16.0-b2/charts/flyte-core/templates/admin/service.yaml
        connectPort: 8089
        httpPort: 8088
        port: 8089
    cacheserviceServer:
      union:
        internalConnectionConfig:
          enabled: true
          urlPattern: '{{ printf "_SERVICE_.%s.svc.cluster.local:80" .Release.Namespace }}'
      authorizer:
        type: "Noop"
        internalCommunicationConfig:
          enabled: false
      cacheservice:
        storage-prefix: cached_outputs
        metrics-scope: flyte
        profiler-port: 10254
        heartbeat-grace-period-multiplier: 3
        max-reservation-heartbeat: 30s
      cache-server:
        grpcPort: 8089
        httpPort: 8080
        grpcServerReflection: true
      otel:  # Ref: https://github.com/flyteorg/flyte/blob/master/flytestdlib/otelutils/config.go
        type: noop
      private:
        app:
          cacheProviderConfig:
            kind: bypass
    logger:
      # This level is incorrectly positioned and needs to be removed in underlying subchart
      level: null

      # In order to set the log level, this is the correct structure.
      # Log levels range from 1 (least verbose) to 5 ("DEBUG" most verbose)
      # logger:
      #   level: 5
    sharedService:
      connectPort: 8089
      httpPort: 8088
      port: 8089
    admin:
      # Hack: Initializing clients triggers a code path in AdminService where it attempt to extract
      # the org from the host. This constraint breaks in situations where we are using a DNS entry that
      # does not have atleast one "." in it. The default flyte-core helm chart defaults to access flyteadmin
      # at "flyteadmin:81". This breaks the Union specific code path. To unblock testing, we are setting
      # the endpoint to the full DNS entry of the flyteadmin service in the cluster.
      endpoint: flyteadmin.{{ .Release.Namespace }}.svc.cluster.local:81
      insecure: true
      clientId: null
      clientSecretLocation: null
  cloudEvents:
    enable: false
  workflow_notifications:
    enabled: false

unionv2:
  enabled: false

dataproxy:
  prometheus:
    enabled: false

artifacts:
  enabled: false

objectstore:
  controlPlane:
    enabled: false

# Disable by default, but can be explicityl enabled if needed.
ingress-nginx:
  enabled: false

  controller:

    # Disable admission webhooks for simplicity
    admissionWebhooks:
      enabled: true

    # Snippet annotations are required
    allowSnippetAnnotations: true
    config:
      annotations-risk-level: "Critical"
      grpc-connect-timeout: "1200"
      grpc-read-timeout: "604800"
      grpc-send-timeout: "604800"

    ingressClassResource:
      enabled: true
      default: false # Assume shared with dataplane and require explicit ingress class assignment.

      name: controlplane
      controllerValue: union.ai/controlplane

# ScyllaDB configuration
# REQUIRED: ScyllaDB is used exclusively by the queue service for high-performance message queueing
# Postgres (configured above) is used by all other control plane services
#
# When enabled, deploys ScyllaDB Operator and Cluster as the queue service backend
#
# IMPORTANT: Before enabling ScyllaDB, you MUST manually install the CRDs:
#   Run the helper script: ./scripts/install-scylla-crds.sh
#
#   Or manually:
#   helm repo add scylla-operator https://scylla-operator-charts.storage.googleapis.com/stable
#   tmpdir=$(mktemp -d) \
#   && helm pull scylla-operator/scylla-operator --version v1.18.1 --untar --untardir "${tmpdir}" \
#   && kubectl apply --server-side -f "${tmpdir}"/scylla-operator/crds/ \
#   && rm -rf "${tmpdir}"
#
# This is required because Helm does not properly manage CRD lifecycle updates.
# See: https://operator.docs.scylladb.com/stable/installation/helm.html
scylla:
  enabled: true

  # ScyllaDB cluster configuration
  fullnameOverride: scylla

  # Storage class configuration
  storageClass:
    create: true # TODO set to false if you have an existing storage class
    name: "scylladb" # arbitrary name for the storage class
    provisioner: "ebs.csi.eks.amazonaws.com"
    parameters:
      type: gp2
      fsType: ext4
    reclaimPolicy: Delete
    volumeBindingMode: WaitForFirstConsumer
    allowVolumeExpansion: true

  # Datacenter configuration
  datacenter: dc1

  # Rack configuration
  racks:
    - name: rack1
      agentResources:
        requests:
          cpu: 50m
          memory: 10M
      members: 3
      storage:
        capacity: 100Gi
        storageClassName: "scylladb"  # Reference the storage class created above
      resources:
        limits:
          cpu: 2
          memory: 4Gi
        requests:
          cpu: 1
          memory: 2Gi
      # Explicitly disable placement constraints (operator adds defaults otherwise)
      # For production with dedicated nodes, configure nodeAffinity and tolerations here
      placement:
        nodeAffinity: {}
        tolerations: []

  # ScyllaDB version
  scyllaImage:
    tag: 2025.1.5

  # Developer mode (disable for production)
  developerMode: true

  # Sysctl properties
  sysctls:
    - fs.aio-max-nr=30000000

  # Additional ScyllaDB configuration can be added here
  # See https://operator.docs.scylladb.com/stable/generic for more options

# ScyllaDB Operator configuration
# The operator manages ScyllaDB clusters in Kubernetes
scylla-operator:

  fullnameOverride: scylla-operator

  # Webhook configuration
  webhook:
    # Set to false if you don't need admission webhooks
    enabled: true

  # Additional operator configuration
  # See https://operator.docs.scylladb.com/stable/installation for more options

# NOTE: ScyllaDB Manager is NOT included as a subchart.
# For backup/repair functionality, install scylla-manager separately.
# See README.md for installation instructions.

# This section is for additional objects that can be added to the Helm chart.
extraObjects: []
