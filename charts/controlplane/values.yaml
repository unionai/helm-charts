global:
  replicaCount: 1
  image:
    repository: "" # Placeholder for the actual image repository
    pullPolicy: IfNotPresent
    tag: latest # Placeholder for the actual image tag
  imagePullSecrets:
  nameOverride: ""
  fullnameOverride: ""
  serviceAccount:
    create: true
    annotations: {}
  podAnnotations:
    linkerd.io/inject: disabled
    prometheus.io/path: /metrics
    prometheus.io/port: "10254"
  service:
    type: ClusterIP
    grpcport: 80
    httpport: 81
    debugport: 82
    connectport: 83
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 250m
      memory: 250Mi
  env:
  - name: GOMEMLIMIT
    valueFrom:
      resourceFieldRef:
        resource: limits.memory
  - name: GOMAXPROCS
    valueFrom:
      resourceFieldRef:
        resource: limits.cpu
  autoscaling:
    enabled: true
    minReplicas: 1
    maxReplicas: 1
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80
  secrets: {}
  podMonitor:
    custom:
      enabled: false
      metricRelabelings: []
  probe:
    enabled: false
  serviceProfile:
    enabled: false
  spreadConstraints:
    enabled: false
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  argo:
    enabled: false
  externalSecrets:
    refreshInterval: 1h
    refs: {}
  postgres-exporter:
    enabled: false
    fullnameOverride: postgres-exporter
    serviceMonitor:
      enabled: false
      labels:
        instance: union
  configMap:
    cache:
      identity:
        enabled: false
    sharedService:
      connectPort: 8081
    authorizer:
      type: "Noop"
      internalCommunicationConfig:
        enabled: false
    connection:
      environment: staging
      region: us-east-2
      rootTenantURLPattern: dns:///{{ organization }}.cloud-staging.union.ai
    otel:
      type: otlpgrpc
      otlpgrpc:
        endpoint: http://otel-collector.monitoring.svc.cluster.local:4317
      sampler:
        parentSampler: traceid
        traceIdRatio: 0.001
    union:
      internalConnectionConfig:
        enabled: true
        urlPattern: "{{ service }}.union.svc.cluster.local:80"
      connection:
        trustedIdentityClaims:
          externalIdentityClaim: ""
      auth:
        enable: false
    logger:
      level: 6

services:
  artifacts:
    fullnameOverride: "artifacts"
    initContainers:
      - name: migrate
        args:
          - artifacts
          - migrate
          - --config
          - "/etc/config/*.yaml"
    args:
      - artifacts
      - serve
      - --config
      - /etc/config/*.yaml
    configMap:
      sharedService:
        metrics:
          scope: "artifacts:"
      db:
        host: dbhost # Placeholder for the actual DB host
        username: "postgres" # Placeholder for the actual DB username
        passwordPath: /etc/secrets/db-pass.txt
        connectionPool:
          maxIdleConnections: 20
          maxOpenConnections: 20
          maxConnectionLifetime: 1m
      artifactsConfig:
        app:
          adminClient:
            hackFlagUntilCellIsolation: true
          artifactBlobStoreConfig:
            container: artifacts-bucket # Placeholder for the actual bucket name used by artifacts
            stow:
              config:
                auth_type: iam
                region: us-east-2
              kind: s3
            type: stow
          artifactDatabaseConfig:
            connMaxLifeTime: 1m
            maxIdleConnections: 20
            maxOpenConnections: 30
            postgres:
              dbname: postgres
              host: dbhost # Placeholder for the actual DB host
              options: sslmode=disable
              passwordPath: /etc/secrets/db-pass.txt
              port: 5432
              readReplicaHost: dbhost # Placeholder for the actual read replica host
              username: postgres
          artifactServerConfig:
            httpPort: 8089
            port: 8080
            respectUserOrgsForServerless: true
          artifactTriggerConfig:
            executionMaxRetryCount: 3
            executionSchedulerQuerySize: 20
            executionSchedulers: 1
            executionSchedulersWait: 10
            triggerProcessorQuerySize: 100
            triggerProcessors: 1
            triggerProcessorsWait: 10
  authorizer:
    fullnameOverride: "authorizer"
    args:
      - authorizer
      - serve
      - --config
      - /etc/config/*.yaml
    configMap:
      sharedService:
        metrics:
          scope: "authorizer:"
  cluster:
    fullnameOverride: "cluster"
    args:
      - cloudcluster
      - serve
      - --config
      - /etc/config/*.yaml
    configMap:
      sharedService:
        metrics:
          scope: "cluster:"
      timeseries:
        timestream:
          databaseName: dbName # Placeholder for the actual DB name
          tableName: "cloudMetricsRaw"
          derivedTableName: "cloudMetricsDerived"
          region: "us-east-2"
          tags:
            - environment: "staging"
      db:
        host: dbhost # Placeholder for the actual DB host
        username: "postgres" # Placeholder for the actual DB username
        passwordPath: /etc/secrets/db-pass.txt
        connectionPool:
          maxIdleConnections: 20
          maxOpenConnections: 20
          maxConnectionLifetime: 1m
      cluster:
        cloudflare:
          active: false
  dataproxy:
    fullnameOverride: "dataproxy"
    args:
      - dataproxy
      - serve
      - --config
      - /etc/config/*.yaml
    configMap:
      sharedService:
        metrics:
          scope: "usage:"
  executions:
    fullnameOverride: "executions"
    args:
      - cloudpropeller
      - serve
      - --config
      - /etc/config/*.yaml
    serviceAccount:
      annotations:
        eks.amazonaws.com/role-arn: executions-role # Placeholder for the actual role ARN
    configMap:
      sharedService:
        metrics:
          scope: "executions:"
      db:
        host: dbhost # Placeholder for the actual DB host
        username: "postgres" # Placeholder for the actual DB username
        passwordPath: /etc/secrets/db-pass.txt
        connectionPool:
          maxIdleConnections: 20
          maxOpenConnections: 20
          maxConnectionLifetime: 1m
      cloudEventsProcessor:
        cloudProvider: AWS
        region: us-east-2
        subscriber:
          accountId: accountId # Placeholder for the actual account ID
          queueName: cloudEventQueue # Placeholder for the actual queue name
      executions:
        app:
          adminClient:
            connection:
              authorizationHeader: flyte-authorization
              clientId: clientID # Placeholder for the actual client ID
              scopes:
                - all
          taskValidation:
            serverlessTaskPodSpecValidation:
              enabled: "true"
            skipOrgs: []
        apps:
          enrichIdentities: true
          publicURLPattern: https://%s.apps.%s.cloud-staging.union.ai
  identity:
    fullnameOverride: "identity"
    args:
      - cloudidentity
      - serve
      - --config
      - /etc/config/*.yaml
    configMap:
      sharedService:
        metrics:
          scope: "identity:"
      identity:
        app:
          rootTenantURLPattern: dns:///{{ organization }}.cloud-staging.union.ai
          env: staging
          identityProviderConfig:
            okta:
              clientRegistrationEndpointUrl: idpurl # Placeholder for the actual IDP URL
          adminClient:
            connection:
              clientId: clientID # Placeholder for the actual client ID
              authorizationHeader: "flyte-authorization"
              scopes:
                - all
  usage:
    fullnameOverride: "usage"
    args:
      - usage
      - serve
      - --config
      - /etc/config/*.yaml
    serviceAccount:
      annotations:
        eks.amazonaws.com/role-arn: usage-role # Placeholder for the actual role ARN
    configMap:
      sharedService:
        metrics:
          scope: "usage:"
      cloudProvider:
        awsConfig:
          region: us-east-2
        provider: aws
      timeseries:
        timestream:
          databaseName: staging-timestream
          derivedTableName: cloudMetricsDerived
          query:
            enabled: true
            includeQuotaBasedResourceMetrics: true
          tableName: cloudMetricsRaw
          tags:
            - environment: staging
